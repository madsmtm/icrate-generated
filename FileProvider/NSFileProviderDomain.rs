//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

// NS_TYPED_EXTENSIBLE_ENUM
pub type NSFileProviderDomainIdentifier = NSString;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSFileProviderDomainVersion;

    unsafe impl ClassType for NSFileProviderDomainVersion {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSCoding for NSFileProviderDomainVersion {}

unsafe impl NSObjectProtocol for NSFileProviderDomainVersion {}

unsafe impl NSSecureCoding for NSFileProviderDomainVersion {}

extern_methods!(
    unsafe impl NSFileProviderDomainVersion {
        #[method_id(@__retain_semantics Other next)]
        pub unsafe fn next(&self) -> Retained<NSFileProviderDomainVersion>;

        #[method(compare:)]
        pub unsafe fn compare(
            &self,
            other_version: &NSFileProviderDomainVersion,
        ) -> NSComparisonResult;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl NSFileProviderDomainVersion {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct NSFileProviderDomainTestingModes(pub NSUInteger);
bitflags::bitflags! {
    impl NSFileProviderDomainTestingModes: NSUInteger {
        const NSFileProviderDomainTestingModeAlwaysEnabled = 1<<0;
        const NSFileProviderDomainTestingModeInteractive = 1<<1;
    }
}

unsafe impl Encode for NSFileProviderDomainTestingModes {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for NSFileProviderDomainTestingModes {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct NSFileProviderKnownFolders(pub NSUInteger);
bitflags::bitflags! {
    impl NSFileProviderKnownFolders: NSUInteger {
        const NSFileProviderDesktop = 1<<0;
        const NSFileProviderDocuments = 1<<1;
    }
}

unsafe impl Encode for NSFileProviderKnownFolders {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for NSFileProviderKnownFolders {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSFileProviderDomain;

    unsafe impl ClassType for NSFileProviderDomain {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSObjectProtocol for NSFileProviderDomain {}

extern_methods!(
    unsafe impl NSFileProviderDomain {
        #[method_id(@__retain_semantics Init initWithIdentifier:displayName:pathRelativeToDocumentStorage:)]
        pub unsafe fn initWithIdentifier_displayName_pathRelativeToDocumentStorage(
            this: Allocated<Self>,
            identifier: &NSFileProviderDomainIdentifier,
            display_name: &NSString,
            path_relative_to_document_storage: &NSString,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithIdentifier:displayName:)]
        pub unsafe fn initWithIdentifier_displayName(
            this: Allocated<Self>,
            identifier: &NSFileProviderDomainIdentifier,
            display_name: &NSString,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithDisplayName:userInfo:volumeURL:)]
        pub unsafe fn initWithDisplayName_userInfo_volumeURL(
            this: Allocated<Self>,
            display_name: &NSString,
            user_info: &NSDictionary,
            volume_url: Option<&NSURL>,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Other identifier)]
        pub unsafe fn identifier(&self) -> Retained<NSFileProviderDomainIdentifier>;

        #[method_id(@__retain_semantics Other displayName)]
        pub unsafe fn displayName(&self) -> Retained<NSString>;

        #[method_id(@__retain_semantics Other pathRelativeToDocumentStorage)]
        pub unsafe fn pathRelativeToDocumentStorage(&self) -> Retained<NSString>;

        #[method(isDisconnected)]
        pub unsafe fn isDisconnected(&self) -> bool;

        #[method(userEnabled)]
        pub unsafe fn userEnabled(&self) -> bool;

        #[method(isHidden)]
        pub unsafe fn isHidden(&self) -> bool;

        #[method(setHidden:)]
        pub unsafe fn setHidden(&self, hidden: bool);

        #[method(isReplicated)]
        pub unsafe fn isReplicated(&self) -> bool;

        #[method(testingModes)]
        pub unsafe fn testingModes(&self) -> NSFileProviderDomainTestingModes;

        #[method(setTestingModes:)]
        pub unsafe fn setTestingModes(&self, testing_modes: NSFileProviderDomainTestingModes);

        #[method_id(@__retain_semantics Other backingStoreIdentity)]
        pub unsafe fn backingStoreIdentity(&self) -> Option<Retained<NSData>>;

        #[method(supportsSyncingTrash)]
        pub unsafe fn supportsSyncingTrash(&self) -> bool;

        #[method(setSupportsSyncingTrash:)]
        pub unsafe fn setSupportsSyncingTrash(&self, supports_syncing_trash: bool);

        #[method_id(@__retain_semantics Other volumeUUID)]
        pub unsafe fn volumeUUID(&self) -> Option<Retained<NSUUID>>;

        #[method_id(@__retain_semantics Other userInfo)]
        pub unsafe fn userInfo(&self) -> Option<Retained<NSDictionary>>;

        #[method(setUserInfo:)]
        pub unsafe fn setUserInfo(&self, user_info: Option<&NSDictionary>);

        #[method(replicatedKnownFolders)]
        pub unsafe fn replicatedKnownFolders(&self) -> NSFileProviderKnownFolders;

        #[method(supportedKnownFolders)]
        pub unsafe fn supportedKnownFolders(&self) -> NSFileProviderKnownFolders;

        #[method(setSupportedKnownFolders:)]
        pub unsafe fn setSupportedKnownFolders(
            &self,
            supported_known_folders: NSFileProviderKnownFolders,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl NSFileProviderDomain {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_methods!(
    /// NSFileProviderDomain
    #[cfg(feature = "NSFileProviderExtension")]
    unsafe impl NSFileProviderExtension {
        #[method_id(@__retain_semantics Other domain)]
        pub unsafe fn domain(&self) -> Option<Retained<NSFileProviderDomain>>;
    }
);

extern "C" {
    pub static NSFileProviderDomainDidChange: &'static NSNotificationName;
}
