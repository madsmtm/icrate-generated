//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSFileProviderKnownFolderLocation;

    unsafe impl ClassType for NSFileProviderKnownFolderLocation {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSObjectProtocol for NSFileProviderKnownFolderLocation {}

extern_methods!(
    unsafe impl NSFileProviderKnownFolderLocation {
        #[cfg(feature = "NSFileProviderItem")]
        #[method_id(@__retain_semantics Init initWithParentItemIdentifier:filename:)]
        pub unsafe fn initWithParentItemIdentifier_filename(
            this: Allocated<Self>,
            parent_item_identifier: &NSFileProviderItemIdentifier,
            filename: &NSString,
        ) -> Retained<Self>;

        #[cfg(feature = "NSFileProviderItem")]
        #[method_id(@__retain_semantics Init initWithExistingItemIdentifier:)]
        pub unsafe fn initWithExistingItemIdentifier(
            this: Allocated<Self>,
            existing_item_identifier: &NSFileProviderItemIdentifier,
        ) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl NSFileProviderKnownFolderLocation {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSFileProviderKnownFolderLocations;

    unsafe impl ClassType for NSFileProviderKnownFolderLocations {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSObjectProtocol for NSFileProviderKnownFolderLocations {}

extern_methods!(
    unsafe impl NSFileProviderKnownFolderLocations {
        #[method(shouldCreateBinaryCompatibilitySymlink)]
        pub unsafe fn shouldCreateBinaryCompatibilitySymlink(&self) -> bool;

        #[method(setShouldCreateBinaryCompatibilitySymlink:)]
        pub unsafe fn setShouldCreateBinaryCompatibilitySymlink(
            &self,
            should_create_binary_compatibility_symlink: bool,
        );

        #[method_id(@__retain_semantics Other desktopLocation)]
        pub unsafe fn desktopLocation(&self)
            -> Option<Retained<NSFileProviderKnownFolderLocation>>;

        #[method(setDesktopLocation:)]
        pub unsafe fn setDesktopLocation(
            &self,
            desktop_location: Option<&NSFileProviderKnownFolderLocation>,
        );

        #[method_id(@__retain_semantics Other documentsLocation)]
        pub unsafe fn documentsLocation(
            &self,
        ) -> Option<Retained<NSFileProviderKnownFolderLocation>>;

        #[method(setDocumentsLocation:)]
        pub unsafe fn setDocumentsLocation(
            &self,
            documents_location: Option<&NSFileProviderKnownFolderLocation>,
        );

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl NSFileProviderKnownFolderLocations {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_methods!(
    /// KnownFolders
    #[cfg(feature = "NSFileProviderManager")]
    unsafe impl NSFileProviderManager {
        #[cfg(feature = "block2")]
        #[method(claimKnownFolders:localizedReason:completionHandler:)]
        pub unsafe fn claimKnownFolders_localizedReason_completionHandler(
            &self,
            known_folders: &NSFileProviderKnownFolderLocations,
            localized_reason: &NSString,
            completion_handler: &block2::Block<dyn Fn(*mut NSError)>,
        );

        #[cfg(all(feature = "NSFileProviderDomain", feature = "block2"))]
        #[method(releaseKnownFolders:localizedReason:completionHandler:)]
        pub unsafe fn releaseKnownFolders_localizedReason_completionHandler(
            &self,
            known_folders: NSFileProviderKnownFolders,
            localized_reason: &NSString,
            completion_handler: &block2::Block<dyn Fn(*mut NSError)>,
        );
    }
);

extern_protocol!(
    pub unsafe trait NSFileProviderKnownFolderSupporting: NSObjectProtocol {
        #[cfg(all(feature = "NSFileProviderDomain", feature = "block2"))]
        #[method(getKnownFolderLocations:completionHandler:)]
        unsafe fn getKnownFolderLocations_completionHandler(
            &self,
            known_folders: NSFileProviderKnownFolders,
            completion_handler: &block2::Block<
                dyn Fn(*mut NSFileProviderKnownFolderLocations, *mut NSError),
            >,
        );
    }

    unsafe impl ProtocolType for dyn NSFileProviderKnownFolderSupporting {}
);
