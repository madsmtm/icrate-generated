//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::FileProvider::*;
use crate::Foundation::*;
use crate::UniformTypeIdentifiers::*;

extern_protocol!(
    #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
    pub unsafe trait NSFileProviderServiceSource {
        #[method_id(@__retain_semantics Other serviceName)]
        unsafe fn serviceName(&self) -> Id<NSFileProviderServiceName>;

        #[cfg(all(
            feature = "Foundation_NSError",
            feature = "Foundation_NSXPCListenerEndpoint"
        ))]
        #[method_id(@__retain_semantics Other makeListenerEndpointAndReturnError:_)]
        unsafe fn makeListenerEndpointAndReturnError(
            &self,
        ) -> Result<Id<NSXPCListenerEndpoint>, Id<NSError>>;

        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        #[optional]
        #[method(isRestricted)]
        unsafe fn isRestricted(&self) -> bool;
    }

    unsafe impl ProtocolType for dyn NSFileProviderServiceSource {}
);

extern_methods!(
    /// NSFileProviderService
    #[cfg(feature = "FileProvider_NSFileProviderExtension")]
    unsafe impl NSFileProviderExtension {
        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSError"))]
        #[cfg(not(any(target_os = "macos", target_os = "tvos", target_os = "watchos")))]
        #[method_id(@__retain_semantics Other supportedServiceSourcesForItemIdentifier:error:_)]
        pub unsafe fn supportedServiceSourcesForItemIdentifier_error(
            &self,
            item_identifier: &NSFileProviderItemIdentifier,
        ) -> Result<Id<NSArray<ProtocolObject<dyn NSFileProviderServiceSource>>>, Id<NSError>>;
    }
);

extern_methods!(
    /// NSFileProviderService
    #[cfg(feature = "FileProvider_NSFileProviderManager")]
    unsafe impl NSFileProviderManager {
        #[cfg(all(
            feature = "Foundation_NSError",
            feature = "Foundation_NSFileProviderService"
        ))]
        #[method(getServiceWithName:itemIdentifier:completionHandler:)]
        pub unsafe fn getServiceWithName_itemIdentifier_completionHandler(
            &self,
            service_name: &NSFileProviderServiceName,
            item_identifier: &NSFileProviderItemIdentifier,
            completion_handler: &Block<(*mut NSFileProviderService, *mut NSError), ()>,
        );
    }
);
