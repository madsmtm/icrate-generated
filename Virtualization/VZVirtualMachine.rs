//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct VZVirtualMachineState(pub NSInteger);
impl VZVirtualMachineState {
    #[doc(alias = "VZVirtualMachineStateStopped")]
    pub const Stopped: Self = Self(0);
    #[doc(alias = "VZVirtualMachineStateRunning")]
    pub const Running: Self = Self(1);
    #[doc(alias = "VZVirtualMachineStatePaused")]
    pub const Paused: Self = Self(2);
    #[doc(alias = "VZVirtualMachineStateError")]
    pub const Error: Self = Self(3);
    #[doc(alias = "VZVirtualMachineStateStarting")]
    pub const Starting: Self = Self(4);
    #[doc(alias = "VZVirtualMachineStatePausing")]
    pub const Pausing: Self = Self(5);
    #[doc(alias = "VZVirtualMachineStateResuming")]
    pub const Resuming: Self = Self(6);
    #[doc(alias = "VZVirtualMachineStateStopping")]
    pub const Stopping: Self = Self(7);
    #[doc(alias = "VZVirtualMachineStateSaving")]
    pub const Saving: Self = Self(8);
    #[doc(alias = "VZVirtualMachineStateRestoring")]
    pub const Restoring: Self = Self(9);
}

unsafe impl Encode for VZVirtualMachineState {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for VZVirtualMachineState {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct VZVirtualMachine;

    unsafe impl ClassType for VZVirtualMachine {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSObjectProtocol for VZVirtualMachine {}

extern_methods!(
    unsafe impl VZVirtualMachine {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(feature = "VZVirtualMachineConfiguration")]
        #[method_id(@__retain_semantics Init initWithConfiguration:)]
        pub unsafe fn initWithConfiguration(
            this: Allocated<Self>,
            configuration: &VZVirtualMachineConfiguration,
        ) -> Retained<Self>;

        #[method(isSupported)]
        pub unsafe fn isSupported() -> bool;

        #[method(state)]
        pub unsafe fn state(&self) -> VZVirtualMachineState;

        #[cfg(feature = "VZVirtualMachineDelegate")]
        #[method_id(@__retain_semantics Other delegate)]
        pub unsafe fn delegate(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn VZVirtualMachineDelegate>>>;

        #[cfg(feature = "VZVirtualMachineDelegate")]
        #[method(setDelegate:)]
        pub unsafe fn setDelegate(
            &self,
            delegate: Option<&ProtocolObject<dyn VZVirtualMachineDelegate>>,
        );

        #[method(canStart)]
        pub unsafe fn canStart(&self) -> bool;

        #[method(canStop)]
        pub unsafe fn canStop(&self) -> bool;

        #[method(canPause)]
        pub unsafe fn canPause(&self) -> bool;

        #[method(canResume)]
        pub unsafe fn canResume(&self) -> bool;

        #[method(canRequestStop)]
        pub unsafe fn canRequestStop(&self) -> bool;

        #[cfg(feature = "VZConsoleDevice")]
        #[method_id(@__retain_semantics Other consoleDevices)]
        pub unsafe fn consoleDevices(&self) -> Retained<NSArray<VZConsoleDevice>>;

        #[cfg(feature = "VZDirectorySharingDevice")]
        #[method_id(@__retain_semantics Other directorySharingDevices)]
        pub unsafe fn directorySharingDevices(&self)
            -> Retained<NSArray<VZDirectorySharingDevice>>;

        #[cfg(feature = "VZGraphicsDevice")]
        #[method_id(@__retain_semantics Other graphicsDevices)]
        pub unsafe fn graphicsDevices(&self) -> Retained<NSArray<VZGraphicsDevice>>;

        #[cfg(feature = "VZMemoryBalloonDevice")]
        #[method_id(@__retain_semantics Other memoryBalloonDevices)]
        pub unsafe fn memoryBalloonDevices(&self) -> Retained<NSArray<VZMemoryBalloonDevice>>;

        #[cfg(feature = "VZNetworkDevice")]
        #[method_id(@__retain_semantics Other networkDevices)]
        pub unsafe fn networkDevices(&self) -> Retained<NSArray<VZNetworkDevice>>;

        #[cfg(feature = "VZSocketDevice")]
        #[method_id(@__retain_semantics Other socketDevices)]
        pub unsafe fn socketDevices(&self) -> Retained<NSArray<VZSocketDevice>>;

        #[cfg(feature = "VZUSBController")]
        #[method_id(@__retain_semantics Other usbControllers)]
        pub unsafe fn usbControllers(&self) -> Retained<NSArray<VZUSBController>>;

        #[cfg(feature = "block2")]
        #[method(startWithCompletionHandler:)]
        pub unsafe fn startWithCompletionHandler(
            &self,
            completion_handler: &block2::Block<dyn Fn(*mut NSError)>,
        );

        #[cfg(all(feature = "VZVirtualMachineStartOptions", feature = "block2"))]
        #[method(startWithOptions:completionHandler:)]
        pub unsafe fn startWithOptions_completionHandler(
            &self,
            options: &VZVirtualMachineStartOptions,
            completion_handler: &block2::Block<dyn Fn(*mut NSError)>,
        );

        #[cfg(feature = "block2")]
        #[method(stopWithCompletionHandler:)]
        pub unsafe fn stopWithCompletionHandler(
            &self,
            completion_handler: &block2::Block<dyn Fn(*mut NSError)>,
        );

        #[cfg(feature = "block2")]
        #[method(pauseWithCompletionHandler:)]
        pub unsafe fn pauseWithCompletionHandler(
            &self,
            completion_handler: &block2::Block<dyn Fn(*mut NSError)>,
        );

        #[cfg(feature = "block2")]
        #[method(resumeWithCompletionHandler:)]
        pub unsafe fn resumeWithCompletionHandler(
            &self,
            completion_handler: &block2::Block<dyn Fn(*mut NSError)>,
        );

        #[cfg(feature = "block2")]
        #[method(restoreMachineStateFromURL:completionHandler:)]
        pub unsafe fn restoreMachineStateFromURL_completionHandler(
            &self,
            save_file_url: &NSURL,
            completion_handler: &block2::Block<dyn Fn(*mut NSError)>,
        );

        #[cfg(feature = "block2")]
        #[method(saveMachineStateToURL:completionHandler:)]
        pub unsafe fn saveMachineStateToURL_completionHandler(
            &self,
            save_file_url: &NSURL,
            completion_handler: &block2::Block<dyn Fn(*mut NSError)>,
        );

        #[method(requestStopWithError:_)]
        pub unsafe fn requestStopWithError(&self) -> Result<(), Retained<NSError>>;
    }
);
