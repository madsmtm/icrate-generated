//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
use objc2_foundation::*;
#[cfg(feature = "objc2-metal")]
#[cfg(not(target_os = "watchos"))]
use objc2_metal::*;

use crate::*;

// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MLComputeUnits(pub NSInteger);
impl MLComputeUnits {
    #[doc(alias = "MLComputeUnitsCPUOnly")]
    pub const CPUOnly: Self = Self(0);
    #[doc(alias = "MLComputeUnitsCPUAndGPU")]
    pub const CPUAndGPU: Self = Self(1);
    #[doc(alias = "MLComputeUnitsAll")]
    pub const All: Self = Self(2);
    #[doc(alias = "MLComputeUnitsCPUAndNeuralEngine")]
    pub const CPUAndNeuralEngine: Self = Self(3);
}

unsafe impl Encode for MLComputeUnits {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for MLComputeUnits {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MLModelConfiguration;

    unsafe impl ClassType for MLModelConfiguration {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSCoding for MLModelConfiguration {}

unsafe impl NSCopying for MLModelConfiguration {}

unsafe impl NSObjectProtocol for MLModelConfiguration {}

unsafe impl NSSecureCoding for MLModelConfiguration {}

extern_methods!(
    unsafe impl MLModelConfiguration {
        #[method_id(@__retain_semantics Other modelDisplayName)]
        pub unsafe fn modelDisplayName(&self) -> Option<Retained<NSString>>;

        #[method(setModelDisplayName:)]
        pub unsafe fn setModelDisplayName(&self, model_display_name: Option<&NSString>);

        #[method(computeUnits)]
        pub unsafe fn computeUnits(&self) -> MLComputeUnits;

        #[method(setComputeUnits:)]
        pub unsafe fn setComputeUnits(&self, compute_units: MLComputeUnits);

        #[cfg(feature = "MLOptimizationHints")]
        #[method_id(@__retain_semantics Other optimizationHints)]
        pub unsafe fn optimizationHints(&self) -> Retained<MLOptimizationHints>;

        #[cfg(feature = "MLOptimizationHints")]
        #[method(setOptimizationHints:)]
        pub unsafe fn setOptimizationHints(&self, optimization_hints: &MLOptimizationHints);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MLModelConfiguration {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_methods!(
    /// MLGPUConfigurationOptions
    unsafe impl MLModelConfiguration {
        #[method(allowLowPrecisionAccumulationOnGPU)]
        pub unsafe fn allowLowPrecisionAccumulationOnGPU(&self) -> bool;

        #[method(setAllowLowPrecisionAccumulationOnGPU:)]
        pub unsafe fn setAllowLowPrecisionAccumulationOnGPU(
            &self,
            allow_low_precision_accumulation_on_gpu: bool,
        );

        #[cfg(feature = "objc2-metal")]
        #[cfg(not(target_os = "watchos"))]
        #[method_id(@__retain_semantics Other preferredMetalDevice)]
        pub unsafe fn preferredMetalDevice(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn MTLDevice>>>;

        #[cfg(feature = "objc2-metal")]
        #[cfg(not(target_os = "watchos"))]
        #[method(setPreferredMetalDevice:)]
        pub unsafe fn setPreferredMetalDevice(
            &self,
            preferred_metal_device: Option<&ProtocolObject<dyn MTLDevice>>,
        );
    }
);

extern_methods!(
    /// MLModelParameterAdditions
    unsafe impl MLModelConfiguration {
        #[cfg(all(feature = "MLKey", feature = "MLParameterKey"))]
        #[method_id(@__retain_semantics Other parameters)]
        pub unsafe fn parameters(
            &self,
        ) -> Option<Retained<NSDictionary<MLParameterKey, AnyObject>>>;

        #[cfg(all(feature = "MLKey", feature = "MLParameterKey"))]
        #[method(setParameters:)]
        pub unsafe fn setParameters(
            &self,
            parameters: Option<&NSDictionary<MLParameterKey, AnyObject>>,
        );
    }
);

extern_methods!(
    /// MultiFunctions
    unsafe impl MLModelConfiguration {
        #[method_id(@__retain_semantics Other functionName)]
        pub unsafe fn functionName(&self) -> Option<Retained<NSString>>;

        #[method(setFunctionName:)]
        pub unsafe fn setFunctionName(&self, function_name: Option<&NSString>);
    }
);
