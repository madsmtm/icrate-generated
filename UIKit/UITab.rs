//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct UITabPlacement(pub NSInteger);
impl UITabPlacement {
    #[doc(alias = "UITabPlacementAutomatic")]
    pub const Automatic: Self = Self(0);
    #[doc(alias = "UITabPlacementDefault")]
    pub const Default: Self = Self(1);
    #[doc(alias = "UITabPlacementOptional")]
    pub const Optional: Self = Self(2);
    #[doc(alias = "UITabPlacementMovable")]
    pub const Movable: Self = Self(3);
    #[doc(alias = "UITabPlacementPinned")]
    pub const Pinned: Self = Self(4);
    #[doc(alias = "UITabPlacementFixed")]
    pub const Fixed: Self = Self(5);
    #[doc(alias = "UITabPlacementSidebarOnly")]
    pub const SidebarOnly: Self = Self(6);
}

unsafe impl Encode for UITabPlacement {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for UITabPlacement {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct UITab;

    unsafe impl ClassType for UITab {
        type Super = NSObject;
        type Mutability = MainThreadOnly;
    }
);

unsafe impl NSObjectProtocol for UITab {}

extern_methods!(
    unsafe impl UITab {
        #[method_id(@__retain_semantics Other identifier)]
        pub unsafe fn identifier(&self) -> Retained<NSString>;

        #[method_id(@__retain_semantics Other title)]
        pub unsafe fn title(&self) -> Retained<NSString>;

        #[method(setTitle:)]
        pub unsafe fn setTitle(&self, title: &NSString);

        #[cfg(feature = "UIImage")]
        #[method_id(@__retain_semantics Other image)]
        pub unsafe fn image(&self) -> Option<Retained<UIImage>>;

        #[cfg(feature = "UIImage")]
        #[method(setImage:)]
        pub unsafe fn setImage(&self, image: Option<&UIImage>);

        #[method_id(@__retain_semantics Other subtitle)]
        pub unsafe fn subtitle(&self) -> Option<Retained<NSString>>;

        #[method(setSubtitle:)]
        pub unsafe fn setSubtitle(&self, subtitle: Option<&NSString>);

        #[method_id(@__retain_semantics Other badgeValue)]
        pub unsafe fn badgeValue(&self) -> Option<Retained<NSString>>;

        #[method(setBadgeValue:)]
        pub unsafe fn setBadgeValue(&self, badge_value: Option<&NSString>);

        #[method(preferredPlacement)]
        pub unsafe fn preferredPlacement(&self) -> UITabPlacement;

        #[method(setPreferredPlacement:)]
        pub unsafe fn setPreferredPlacement(&self, preferred_placement: UITabPlacement);

        #[method_id(@__retain_semantics Other userInfo)]
        pub unsafe fn userInfo(&self) -> Option<Retained<AnyObject>>;

        #[method(setUserInfo:)]
        pub unsafe fn setUserInfo(&self, user_info: Option<&AnyObject>);

        #[cfg(feature = "UITabGroup")]
        #[method_id(@__retain_semantics Other parent)]
        pub unsafe fn parent(&self) -> Option<Retained<UITabGroup>>;

        #[cfg(all(
            feature = "UIResponder",
            feature = "UITabBarController",
            feature = "UIViewController"
        ))]
        #[method_id(@__retain_semantics Other tabBarController)]
        pub unsafe fn tabBarController(&self) -> Option<Retained<UITabBarController>>;

        #[cfg(all(feature = "UIResponder", feature = "UIViewController"))]
        #[method_id(@__retain_semantics Other viewController)]
        pub unsafe fn viewController(&self) -> Option<Retained<UIViewController>>;

        #[method(isHidden)]
        pub unsafe fn isHidden(&self) -> bool;

        #[method(setHidden:)]
        pub unsafe fn setHidden(&self, hidden: bool);

        #[method(isHiddenByDefault)]
        pub unsafe fn isHiddenByDefault(&self) -> bool;

        #[method(setHiddenByDefault:)]
        pub unsafe fn setHiddenByDefault(&self, hidden_by_default: bool);

        #[method(allowsHiding)]
        pub unsafe fn allowsHiding(&self) -> bool;

        #[method(setAllowsHiding:)]
        pub unsafe fn setAllowsHiding(&self, allows_hiding: bool);

        #[cfg(all(
            feature = "UIImage",
            feature = "UIResponder",
            feature = "UIViewController",
            feature = "block2"
        ))]
        #[method_id(@__retain_semantics Init initWithTitle:image:identifier:viewControllerProvider:)]
        pub unsafe fn initWithTitle_image_identifier_viewControllerProvider(
            this: Allocated<Self>,
            title: &NSString,
            image: Option<&UIImage>,
            identifier: &NSString,
            view_controller_provider: Option<
                &block2::Block<dyn Fn(NonNull<UITab>) -> NonNull<UIViewController>>,
            >,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    }
);

extern_methods!(
    /// UIPopoverPresentationControllerSourceItem
    unsafe impl UITab {}
);

#[cfg(feature = "UIPopoverPresentationControllerSourceItem")]
unsafe impl UIPopoverPresentationControllerSourceItem for UITab {}

extern_methods!(
    /// UISpringLoadedInteractionSupporting
    unsafe impl UITab {}
);

#[cfg(feature = "UISpringLoadedInteractionSupporting")]
unsafe impl UISpringLoadedInteractionSupporting for UITab {}

extern_methods!(
    /// UIAccessibility
    unsafe impl UITab {}
);

#[cfg(feature = "UIAccessibilityIdentification")]
unsafe impl UIAccessibilityIdentification for UITab {}

extern_methods!(
    /// UITab
    #[cfg(all(feature = "UIResponder", feature = "UIViewController"))]
    unsafe impl UIViewController {
        #[method_id(@__retain_semantics Other tab)]
        pub unsafe fn tab(&self) -> Option<Retained<UITab>>;
    }
);
