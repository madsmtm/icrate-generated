//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::ClassKit::*;
use crate::Foundation::*;

ns_enum!(
    #[underlying(NSInteger)]
    #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
    pub enum CLSContextType {
        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        CLSContextTypeNone = 0,
        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        CLSContextTypeApp = 1,
        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        CLSContextTypeChapter = 2,
        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        CLSContextTypeSection = 3,
        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        CLSContextTypeLevel = 4,
        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        CLSContextTypePage = 5,
        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        CLSContextTypeTask = 6,
        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        CLSContextTypeChallenge = 7,
        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        CLSContextTypeQuiz = 8,
        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        CLSContextTypeExercise = 9,
        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        CLSContextTypeLesson = 10,
        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        CLSContextTypeBook = 11,
        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        CLSContextTypeGame = 12,
        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        CLSContextTypeDocument = 13,
        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        CLSContextTypeAudio = 14,
        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        CLSContextTypeVideo = 15,
        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        CLSContextTypeCourse = 16,
        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        CLSContextTypeCustom = 17,
    }
);

typed_enum!(
    pub type CLSContextTopic = NSString;
);

extern_static!(CLSContextTopicMath: &'static CLSContextTopic);

extern_static!(CLSContextTopicScience: &'static CLSContextTopic);

extern_static!(CLSContextTopicLiteracyAndWriting: &'static CLSContextTopic);

extern_static!(CLSContextTopicWorldLanguage: &'static CLSContextTopic);

extern_static!(CLSContextTopicSocialScience: &'static CLSContextTopic);

extern_static!(CLSContextTopicComputerScienceAndEngineering: &'static CLSContextTopic);

extern_static!(CLSContextTopicArtsAndMusic: &'static CLSContextTopic);

extern_static!(CLSContextTopicHealthAndFitness: &'static CLSContextTopic);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "ClassKit_CLSContext")]
    #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
    pub struct CLSContext;

    #[cfg(feature = "ClassKit_CLSContext")]
    unsafe impl ClassType for CLSContext {
        #[inherits(NSObject)]
        type Super = CLSObject;
    }
);

#[cfg(feature = "ClassKit_CLSContext")]
unsafe impl NSCoding for CLSContext {}

#[cfg(feature = "ClassKit_CLSContext")]
unsafe impl NSObjectProtocol for CLSContext {}

#[cfg(feature = "ClassKit_CLSContext")]
unsafe impl NSSecureCoding for CLSContext {}

extern_methods!(
    #[cfg(feature = "ClassKit_CLSContext")]
    unsafe impl CLSContext {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Id<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSString"))]
        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        #[method_id(@__retain_semantics Other identifierPath)]
        pub unsafe fn identifierPath(&self) -> Id<NSArray<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other identifier)]
        pub unsafe fn identifier(&self) -> Id<NSString>;

        #[cfg(feature = "Foundation_NSURL")]
        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        #[method_id(@__retain_semantics Other universalLinkURL)]
        pub unsafe fn universalLinkURL(&self) -> Option<Id<NSURL>>;

        #[cfg(feature = "Foundation_NSURL")]
        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        #[method(setUniversalLinkURL:)]
        pub unsafe fn setUniversalLinkURL(&self, universal_link_url: Option<&NSURL>);

        #[method(type)]
        pub unsafe fn r#type(&self) -> CLSContextType;

        #[cfg(feature = "Foundation_NSString")]
        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        #[method_id(@__retain_semantics Other customTypeName)]
        pub unsafe fn customTypeName(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        #[method(setCustomTypeName:)]
        pub unsafe fn setCustomTypeName(&self, custom_type_name: Option<&NSString>);

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other title)]
        pub unsafe fn title(&self) -> Id<NSString>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setTitle:)]
        pub unsafe fn setTitle(&self, title: &NSString);

        #[method(displayOrder)]
        pub unsafe fn displayOrder(&self) -> NSInteger;

        #[method(setDisplayOrder:)]
        pub unsafe fn setDisplayOrder(&self, display_order: NSInteger);

        #[method_id(@__retain_semantics Other topic)]
        pub unsafe fn topic(&self) -> Option<Id<CLSContextTopic>>;

        #[method(setTopic:)]
        pub unsafe fn setTopic(&self, topic: Option<&CLSContextTopic>);

        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        #[method(isAssignable)]
        pub unsafe fn isAssignable(&self) -> bool;

        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        #[method(setAssignable:)]
        pub unsafe fn setAssignable(&self, assignable: bool);

        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        #[method(suggestedAge)]
        pub unsafe fn suggestedAge(&self) -> NSRange;

        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        #[method(setSuggestedAge:)]
        pub unsafe fn setSuggestedAge(&self, suggested_age: NSRange);

        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        #[method(suggestedCompletionTime)]
        pub unsafe fn suggestedCompletionTime(&self) -> NSRange;

        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        #[method(setSuggestedCompletionTime:)]
        pub unsafe fn setSuggestedCompletionTime(&self, suggested_completion_time: NSRange);

        #[cfg(all(
            feature = "ClassKit_CLSProgressReportingCapability",
            feature = "Foundation_NSSet"
        ))]
        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        #[method_id(@__retain_semantics Other progressReportingCapabilities)]
        pub unsafe fn progressReportingCapabilities(
            &self,
        ) -> Id<NSSet<CLSProgressReportingCapability>>;

        #[cfg(feature = "Foundation_NSString")]
        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        #[method_id(@__retain_semantics Other summary)]
        pub unsafe fn summary(&self) -> Option<Id<NSString>>;

        #[cfg(feature = "Foundation_NSString")]
        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        #[method(setSummary:)]
        pub unsafe fn setSummary(&self, summary: Option<&NSString>);

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Init initWithType:identifier:title:)]
        pub unsafe fn initWithType_identifier_title(
            this: Option<Allocated<Self>>,
            r#type: CLSContextType,
            identifier: &NSString,
            title: &NSString,
        ) -> Id<Self>;

        #[method(isActive)]
        pub unsafe fn isActive(&self) -> bool;

        #[method(becomeActive)]
        pub unsafe fn becomeActive(&self);

        #[method(resignActive)]
        pub unsafe fn resignActive(&self);

        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        #[method(setType:)]
        pub unsafe fn setType(&self, r#type: CLSContextType);

        #[cfg(all(
            feature = "ClassKit_CLSProgressReportingCapability",
            feature = "Foundation_NSSet"
        ))]
        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        #[method(addProgressReportingCapabilities:)]
        pub unsafe fn addProgressReportingCapabilities(
            &self,
            capabilities: &NSSet<CLSProgressReportingCapability>,
        );

        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        #[method(resetProgressReportingCapabilities)]
        pub unsafe fn resetProgressReportingCapabilities(&self);
    }
);

extern_methods!(
    /// Hierarchy
    #[cfg(feature = "ClassKit_CLSContext")]
    unsafe impl CLSContext {
        #[method_id(@__retain_semantics Other parent)]
        pub unsafe fn parent(&self) -> Option<Id<CLSContext>>;

        #[method(removeFromParent)]
        pub unsafe fn removeFromParent(&self);

        #[method(addChildContext:)]
        pub unsafe fn addChildContext(&self, child: &CLSContext);

        #[cfg(all(
            feature = "Foundation_NSArray",
            feature = "Foundation_NSError",
            feature = "Foundation_NSString"
        ))]
        #[method(descendantMatchingIdentifierPath:completion:)]
        pub unsafe fn descendantMatchingIdentifierPath_completion(
            &self,
            identifier_path: &NSArray<NSString>,
            completion: &Block<(*mut CLSContext, *mut NSError), ()>,
        );

        #[cfg(feature = "Foundation_NSArray")]
        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        #[method_id(@__retain_semantics Other navigationChildContexts)]
        pub unsafe fn navigationChildContexts(&self) -> Id<NSArray<CLSContext>>;

        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        #[method(addNavigationChildContext:)]
        pub unsafe fn addNavigationChildContext(&self, child: &CLSContext);

        #[cfg(not(any(target_os = "tvos", target_os = "watchos")))]
        #[method(removeNavigationChildContext:)]
        pub unsafe fn removeNavigationChildContext(&self, child: &CLSContext);
    }
);
