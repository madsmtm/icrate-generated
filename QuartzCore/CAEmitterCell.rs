//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CAEmitterCell;

    unsafe impl ClassType for CAEmitterCell {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

#[cfg(feature = "CAMediaTiming")]
unsafe impl CAMediaTiming for CAEmitterCell {}

unsafe impl NSCoding for CAEmitterCell {}

unsafe impl NSObjectProtocol for CAEmitterCell {}

unsafe impl NSSecureCoding for CAEmitterCell {}

extern_methods!(
    unsafe impl CAEmitterCell {
        #[method_id(@__retain_semantics Other emitterCell)]
        pub unsafe fn emitter_cell() -> Retained<Self>;

        #[method_id(@__retain_semantics Other defaultValueForKey:)]
        pub unsafe fn default_value_for_key(key: &NSString) -> Option<Retained<AnyObject>>;

        #[method(shouldArchiveValueForKey:)]
        pub unsafe fn should_archive_value_for_key(&self, key: &NSString) -> bool;

        #[method_id(@__retain_semantics Other name)]
        pub unsafe fn name(&self) -> Option<Retained<NSString>>;

        #[method(setName:)]
        pub unsafe fn set_name(&self, name: Option<&NSString>);

        #[method(isEnabled)]
        pub unsafe fn is_enabled(&self) -> bool;

        #[method(setEnabled:)]
        pub unsafe fn set_enabled(&self, enabled: bool);

        #[method(birthRate)]
        pub unsafe fn birth_rate(&self) -> c_float;

        #[method(setBirthRate:)]
        pub unsafe fn set_birth_rate(&self, birth_rate: c_float);

        #[method(lifetime)]
        pub unsafe fn lifetime(&self) -> c_float;

        #[method(setLifetime:)]
        pub unsafe fn set_lifetime(&self, lifetime: c_float);

        #[method(lifetimeRange)]
        pub unsafe fn lifetime_range(&self) -> c_float;

        #[method(setLifetimeRange:)]
        pub unsafe fn set_lifetime_range(&self, lifetime_range: c_float);

        #[method(emissionLatitude)]
        pub unsafe fn emission_latitude(&self) -> CGFloat;

        #[method(setEmissionLatitude:)]
        pub unsafe fn set_emission_latitude(&self, emission_latitude: CGFloat);

        #[method(emissionLongitude)]
        pub unsafe fn emission_longitude(&self) -> CGFloat;

        #[method(setEmissionLongitude:)]
        pub unsafe fn set_emission_longitude(&self, emission_longitude: CGFloat);

        #[method(emissionRange)]
        pub unsafe fn emission_range(&self) -> CGFloat;

        #[method(setEmissionRange:)]
        pub unsafe fn set_emission_range(&self, emission_range: CGFloat);

        #[method(velocity)]
        pub unsafe fn velocity(&self) -> CGFloat;

        #[method(setVelocity:)]
        pub unsafe fn set_velocity(&self, velocity: CGFloat);

        #[method(velocityRange)]
        pub unsafe fn velocity_range(&self) -> CGFloat;

        #[method(setVelocityRange:)]
        pub unsafe fn set_velocity_range(&self, velocity_range: CGFloat);

        #[method(xAcceleration)]
        pub unsafe fn x_acceleration(&self) -> CGFloat;

        #[method(setXAcceleration:)]
        pub unsafe fn set_x_acceleration(&self, x_acceleration: CGFloat);

        #[method(yAcceleration)]
        pub unsafe fn y_acceleration(&self) -> CGFloat;

        #[method(setYAcceleration:)]
        pub unsafe fn set_y_acceleration(&self, y_acceleration: CGFloat);

        #[method(zAcceleration)]
        pub unsafe fn z_acceleration(&self) -> CGFloat;

        #[method(setZAcceleration:)]
        pub unsafe fn set_z_acceleration(&self, z_acceleration: CGFloat);

        #[method(scale)]
        pub unsafe fn scale(&self) -> CGFloat;

        #[method(setScale:)]
        pub unsafe fn set_scale(&self, scale: CGFloat);

        #[method(scaleRange)]
        pub unsafe fn scale_range(&self) -> CGFloat;

        #[method(setScaleRange:)]
        pub unsafe fn set_scale_range(&self, scale_range: CGFloat);

        #[method(scaleSpeed)]
        pub unsafe fn scale_speed(&self) -> CGFloat;

        #[method(setScaleSpeed:)]
        pub unsafe fn set_scale_speed(&self, scale_speed: CGFloat);

        #[method(spin)]
        pub unsafe fn spin(&self) -> CGFloat;

        #[method(setSpin:)]
        pub unsafe fn set_spin(&self, spin: CGFloat);

        #[method(spinRange)]
        pub unsafe fn spin_range(&self) -> CGFloat;

        #[method(setSpinRange:)]
        pub unsafe fn set_spin_range(&self, spin_range: CGFloat);

        #[method(redRange)]
        pub unsafe fn red_range(&self) -> c_float;

        #[method(setRedRange:)]
        pub unsafe fn set_red_range(&self, red_range: c_float);

        #[method(greenRange)]
        pub unsafe fn green_range(&self) -> c_float;

        #[method(setGreenRange:)]
        pub unsafe fn set_green_range(&self, green_range: c_float);

        #[method(blueRange)]
        pub unsafe fn blue_range(&self) -> c_float;

        #[method(setBlueRange:)]
        pub unsafe fn set_blue_range(&self, blue_range: c_float);

        #[method(alphaRange)]
        pub unsafe fn alpha_range(&self) -> c_float;

        #[method(setAlphaRange:)]
        pub unsafe fn set_alpha_range(&self, alpha_range: c_float);

        #[method(redSpeed)]
        pub unsafe fn red_speed(&self) -> c_float;

        #[method(setRedSpeed:)]
        pub unsafe fn set_red_speed(&self, red_speed: c_float);

        #[method(greenSpeed)]
        pub unsafe fn green_speed(&self) -> c_float;

        #[method(setGreenSpeed:)]
        pub unsafe fn set_green_speed(&self, green_speed: c_float);

        #[method(blueSpeed)]
        pub unsafe fn blue_speed(&self) -> c_float;

        #[method(setBlueSpeed:)]
        pub unsafe fn set_blue_speed(&self, blue_speed: c_float);

        #[method(alphaSpeed)]
        pub unsafe fn alpha_speed(&self) -> c_float;

        #[method(setAlphaSpeed:)]
        pub unsafe fn set_alpha_speed(&self, alpha_speed: c_float);

        #[method_id(@__retain_semantics Other contents)]
        pub unsafe fn contents(&self) -> Option<Retained<AnyObject>>;

        #[method(setContents:)]
        pub unsafe fn set_contents(&self, contents: Option<&AnyObject>);

        #[method(contentsRect)]
        pub unsafe fn contents_rect(&self) -> CGRect;

        #[method(setContentsRect:)]
        pub unsafe fn set_contents_rect(&self, contents_rect: CGRect);

        #[method(contentsScale)]
        pub unsafe fn contents_scale(&self) -> CGFloat;

        #[method(setContentsScale:)]
        pub unsafe fn set_contents_scale(&self, contents_scale: CGFloat);

        #[method_id(@__retain_semantics Other minificationFilter)]
        pub unsafe fn minification_filter(&self) -> Retained<NSString>;

        #[method(setMinificationFilter:)]
        pub unsafe fn set_minification_filter(&self, minification_filter: &NSString);

        #[method_id(@__retain_semantics Other magnificationFilter)]
        pub unsafe fn magnification_filter(&self) -> Retained<NSString>;

        #[method(setMagnificationFilter:)]
        pub unsafe fn set_magnification_filter(&self, magnification_filter: &NSString);

        #[method(minificationFilterBias)]
        pub unsafe fn minification_filter_bias(&self) -> c_float;

        #[method(setMinificationFilterBias:)]
        pub unsafe fn set_minification_filter_bias(&self, minification_filter_bias: c_float);

        #[method_id(@__retain_semantics Other emitterCells)]
        pub unsafe fn emitter_cells(&self) -> Option<Retained<NSArray<CAEmitterCell>>>;

        #[method(setEmitterCells:)]
        pub unsafe fn set_emitter_cells(&self, emitter_cells: Option<&NSArray<CAEmitterCell>>);

        #[method_id(@__retain_semantics Other style)]
        pub unsafe fn style(&self) -> Option<Retained<NSDictionary>>;

        #[method(setStyle:)]
        pub unsafe fn set_style(&self, style: Option<&NSDictionary>);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl CAEmitterCell {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
