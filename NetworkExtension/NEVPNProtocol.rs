//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NEVPNProtocol;

    unsafe impl ClassType for NEVPNProtocol {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSCoding for NEVPNProtocol {}

unsafe impl NSCopying for NEVPNProtocol {}

unsafe impl NSObjectProtocol for NEVPNProtocol {}

unsafe impl NSSecureCoding for NEVPNProtocol {}

extern_methods!(
    unsafe impl NEVPNProtocol {
        #[method_id(@__retain_semantics Other serverAddress)]
        pub unsafe fn serverAddress(&self) -> Option<Retained<NSString>>;

        #[method(setServerAddress:)]
        pub unsafe fn setServerAddress(&self, server_address: Option<&NSString>);

        #[method_id(@__retain_semantics Other username)]
        pub unsafe fn username(&self) -> Option<Retained<NSString>>;

        #[method(setUsername:)]
        pub unsafe fn setUsername(&self, username: Option<&NSString>);

        #[method_id(@__retain_semantics Other passwordReference)]
        pub unsafe fn passwordReference(&self) -> Option<Retained<NSData>>;

        #[method(setPasswordReference:)]
        pub unsafe fn setPasswordReference(&self, password_reference: Option<&NSData>);

        #[method_id(@__retain_semantics Other identityReference)]
        pub unsafe fn identityReference(&self) -> Option<Retained<NSData>>;

        #[method(setIdentityReference:)]
        pub unsafe fn setIdentityReference(&self, identity_reference: Option<&NSData>);

        #[method_id(@__retain_semantics Other identityData)]
        pub unsafe fn identityData(&self) -> Option<Retained<NSData>>;

        #[method(setIdentityData:)]
        pub unsafe fn setIdentityData(&self, identity_data: Option<&NSData>);

        #[method_id(@__retain_semantics Other identityDataPassword)]
        pub unsafe fn identityDataPassword(&self) -> Option<Retained<NSString>>;

        #[method(setIdentityDataPassword:)]
        pub unsafe fn setIdentityDataPassword(&self, identity_data_password: Option<&NSString>);

        #[method(disconnectOnSleep)]
        pub unsafe fn disconnectOnSleep(&self) -> bool;

        #[method(setDisconnectOnSleep:)]
        pub unsafe fn setDisconnectOnSleep(&self, disconnect_on_sleep: bool);

        #[cfg(feature = "NEProxySettings")]
        #[method_id(@__retain_semantics Other proxySettings)]
        pub unsafe fn proxySettings(&self) -> Option<Retained<NEProxySettings>>;

        #[cfg(feature = "NEProxySettings")]
        #[method(setProxySettings:)]
        pub unsafe fn setProxySettings(&self, proxy_settings: Option<&NEProxySettings>);

        #[method(includeAllNetworks)]
        pub unsafe fn includeAllNetworks(&self) -> bool;

        #[method(setIncludeAllNetworks:)]
        pub unsafe fn setIncludeAllNetworks(&self, include_all_networks: bool);

        #[method(excludeLocalNetworks)]
        pub unsafe fn excludeLocalNetworks(&self) -> bool;

        #[method(setExcludeLocalNetworks:)]
        pub unsafe fn setExcludeLocalNetworks(&self, exclude_local_networks: bool);

        #[method(excludeCellularServices)]
        pub unsafe fn excludeCellularServices(&self) -> bool;

        #[method(setExcludeCellularServices:)]
        pub unsafe fn setExcludeCellularServices(&self, exclude_cellular_services: bool);

        #[method(excludeAPNs)]
        pub unsafe fn excludeAPNs(&self) -> bool;

        #[method(setExcludeAPNs:)]
        pub unsafe fn setExcludeAPNs(&self, exclude_ap_ns: bool);

        #[method(excludeDeviceCommunication)]
        pub unsafe fn excludeDeviceCommunication(&self) -> bool;

        #[method(setExcludeDeviceCommunication:)]
        pub unsafe fn setExcludeDeviceCommunication(&self, exclude_device_communication: bool);

        #[method(enforceRoutes)]
        pub unsafe fn enforceRoutes(&self) -> bool;

        #[method(setEnforceRoutes:)]
        pub unsafe fn setEnforceRoutes(&self, enforce_routes: bool);

        #[method_id(@__retain_semantics Other sliceUUID)]
        pub unsafe fn sliceUUID(&self) -> Option<Retained<NSString>>;

        #[method(setSliceUUID:)]
        pub unsafe fn setSliceUUID(&self, slice_uuid: Option<&NSString>);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl NEVPNProtocol {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
