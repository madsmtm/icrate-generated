// This file has been automatically generated by `objc2`'s `header-translator`.
// DO NOT EDIT

#![allow(unused_imports)]
#![allow(deprecated)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(missing_docs)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::type_complexity)]
#![allow(clippy::upper_case_acronyms)]
#![allow(clippy::identity_op)]
#![allow(clippy::missing_safety_doc)]

#[link(name = "NetworkExtension", kind = "framework")]
extern "C" {}

#[cfg(feature = "NEAppProxyFlow")]
#[path = "NEAppProxyFlow.rs"]
mod __NEAppProxyFlow;
#[cfg(feature = "NEAppProxyProvider")]
#[path = "NEAppProxyProvider.rs"]
mod __NEAppProxyProvider;
#[cfg(feature = "NEAppProxyProviderManager")]
#[path = "NEAppProxyProviderManager.rs"]
mod __NEAppProxyProviderManager;
#[cfg(feature = "NEAppProxyTCPFlow")]
#[path = "NEAppProxyTCPFlow.rs"]
mod __NEAppProxyTCPFlow;
#[cfg(feature = "NEAppProxyUDPFlow")]
#[path = "NEAppProxyUDPFlow.rs"]
mod __NEAppProxyUDPFlow;
#[cfg(feature = "NEAppPushManager")]
#[path = "NEAppPushManager.rs"]
mod __NEAppPushManager;
#[cfg(feature = "NEAppPushProvider")]
#[path = "NEAppPushProvider.rs"]
mod __NEAppPushProvider;
#[cfg(feature = "NEAppRule")]
#[path = "NEAppRule.rs"]
mod __NEAppRule;
#[cfg(feature = "NEDNSProxyManager")]
#[path = "NEDNSProxyManager.rs"]
mod __NEDNSProxyManager;
#[cfg(feature = "NEDNSProxyProvider")]
#[path = "NEDNSProxyProvider.rs"]
mod __NEDNSProxyProvider;
#[cfg(feature = "NEDNSProxyProviderProtocol")]
#[path = "NEDNSProxyProviderProtocol.rs"]
mod __NEDNSProxyProviderProtocol;
#[cfg(feature = "NEDNSSettings")]
#[path = "NEDNSSettings.rs"]
mod __NEDNSSettings;
#[cfg(feature = "NEDNSSettingsManager")]
#[path = "NEDNSSettingsManager.rs"]
mod __NEDNSSettingsManager;
#[cfg(feature = "NEEthernetTunnelNetworkSettings")]
#[path = "NEEthernetTunnelNetworkSettings.rs"]
mod __NEEthernetTunnelNetworkSettings;
#[cfg(feature = "NEEthernetTunnelProvider")]
#[path = "NEEthernetTunnelProvider.rs"]
mod __NEEthernetTunnelProvider;
#[cfg(feature = "NEFilterControlProvider")]
#[path = "NEFilterControlProvider.rs"]
mod __NEFilterControlProvider;
#[cfg(feature = "NEFilterDataProvider")]
#[path = "NEFilterDataProvider.rs"]
mod __NEFilterDataProvider;
#[cfg(feature = "NEFilterFlow")]
#[path = "NEFilterFlow.rs"]
mod __NEFilterFlow;
#[cfg(feature = "NEFilterManager")]
#[path = "NEFilterManager.rs"]
mod __NEFilterManager;
#[cfg(feature = "NEFilterPacketProvider")]
#[path = "NEFilterPacketProvider.rs"]
mod __NEFilterPacketProvider;
#[cfg(feature = "NEFilterProvider")]
#[path = "NEFilterProvider.rs"]
mod __NEFilterProvider;
#[cfg(feature = "NEFilterProviderConfiguration")]
#[path = "NEFilterProviderConfiguration.rs"]
mod __NEFilterProviderConfiguration;
#[cfg(feature = "NEFilterRule")]
#[path = "NEFilterRule.rs"]
mod __NEFilterRule;
#[cfg(feature = "NEFilterSettings")]
#[path = "NEFilterSettings.rs"]
mod __NEFilterSettings;
#[cfg(feature = "NEFlowMetaData")]
#[path = "NEFlowMetaData.rs"]
mod __NEFlowMetaData;
#[cfg(feature = "NEHotspotConfigurationManager")]
#[path = "NEHotspotConfigurationManager.rs"]
mod __NEHotspotConfigurationManager;
#[cfg(feature = "NEHotspotHelper")]
#[path = "NEHotspotHelper.rs"]
mod __NEHotspotHelper;
#[cfg(feature = "NEHotspotNetwork")]
#[path = "NEHotspotNetwork.rs"]
mod __NEHotspotNetwork;
#[cfg(feature = "NEIPv4Settings")]
#[path = "NEIPv4Settings.rs"]
mod __NEIPv4Settings;
#[cfg(feature = "NEIPv6Settings")]
#[path = "NEIPv6Settings.rs"]
mod __NEIPv6Settings;
#[cfg(feature = "NENetworkRule")]
#[path = "NENetworkRule.rs"]
mod __NENetworkRule;
#[cfg(feature = "NEOnDemandRule")]
#[path = "NEOnDemandRule.rs"]
mod __NEOnDemandRule;
#[cfg(feature = "NEPacket")]
#[path = "NEPacket.rs"]
mod __NEPacket;
#[cfg(feature = "NEPacketTunnelFlow")]
#[path = "NEPacketTunnelFlow.rs"]
mod __NEPacketTunnelFlow;
#[cfg(feature = "NEPacketTunnelNetworkSettings")]
#[path = "NEPacketTunnelNetworkSettings.rs"]
mod __NEPacketTunnelNetworkSettings;
#[cfg(feature = "NEPacketTunnelProvider")]
#[path = "NEPacketTunnelProvider.rs"]
mod __NEPacketTunnelProvider;
#[cfg(feature = "NEProvider")]
#[path = "NEProvider.rs"]
mod __NEProvider;
#[cfg(feature = "NEProxySettings")]
#[path = "NEProxySettings.rs"]
mod __NEProxySettings;
#[cfg(feature = "NERelay")]
#[path = "NERelay.rs"]
mod __NERelay;
#[cfg(feature = "NERelayManager")]
#[path = "NERelayManager.rs"]
mod __NERelayManager;
#[cfg(feature = "NETransparentProxyManager")]
#[path = "NETransparentProxyManager.rs"]
mod __NETransparentProxyManager;
#[cfg(feature = "NETransparentProxyNetworkSettings")]
#[path = "NETransparentProxyNetworkSettings.rs"]
mod __NETransparentProxyNetworkSettings;
#[cfg(feature = "NETransparentProxyProvider")]
#[path = "NETransparentProxyProvider.rs"]
mod __NETransparentProxyProvider;
#[cfg(feature = "NETunnelNetworkSettings")]
#[path = "NETunnelNetworkSettings.rs"]
mod __NETunnelNetworkSettings;
#[cfg(feature = "NETunnelProvider")]
#[path = "NETunnelProvider.rs"]
mod __NETunnelProvider;
#[cfg(feature = "NETunnelProviderManager")]
#[path = "NETunnelProviderManager.rs"]
mod __NETunnelProviderManager;
#[cfg(feature = "NETunnelProviderProtocol")]
#[path = "NETunnelProviderProtocol.rs"]
mod __NETunnelProviderProtocol;
#[cfg(feature = "NETunnelProviderSession")]
#[path = "NETunnelProviderSession.rs"]
mod __NETunnelProviderSession;
#[cfg(feature = "NEVPNConnection")]
#[path = "NEVPNConnection.rs"]
mod __NEVPNConnection;
#[cfg(feature = "NEVPNManager")]
#[path = "NEVPNManager.rs"]
mod __NEVPNManager;
#[cfg(feature = "NEVPNProtocol")]
#[path = "NEVPNProtocol.rs"]
mod __NEVPNProtocol;
#[cfg(feature = "NEVPNProtocolIKEv2")]
#[path = "NEVPNProtocolIKEv2.rs"]
mod __NEVPNProtocolIKEv2;
#[cfg(feature = "NEVPNProtocolIPSec")]
#[path = "NEVPNProtocolIPSec.rs"]
mod __NEVPNProtocolIPSec;
#[cfg(feature = "NWBonjourServiceEndpoint")]
#[path = "NWBonjourServiceEndpoint.rs"]
mod __NWBonjourServiceEndpoint;
#[cfg(feature = "NWEndpoint")]
#[path = "NWEndpoint.rs"]
mod __NWEndpoint;
#[cfg(feature = "NWHostEndpoint")]
#[path = "NWHostEndpoint.rs"]
mod __NWHostEndpoint;
#[cfg(feature = "NWPath")]
#[path = "NWPath.rs"]
mod __NWPath;
#[cfg(feature = "NWTCPConnection")]
#[path = "NWTCPConnection.rs"]
mod __NWTCPConnection;
#[cfg(feature = "NWTLSParameters")]
#[path = "NWTLSParameters.rs"]
mod __NWTLSParameters;
#[cfg(feature = "NWUDPSession")]
#[path = "NWUDPSession.rs"]
mod __NWUDPSession;

#[cfg(feature = "NEAppProxyFlow")]
pub use self::__NEAppProxyFlow::NEAppProxyErrorDomain;
#[cfg(feature = "NEAppProxyFlow")]
pub use self::__NEAppProxyFlow::NEAppProxyFlow;
#[cfg(feature = "NEAppProxyFlow")]
pub use self::__NEAppProxyFlow::NEAppProxyFlowError;
#[cfg(all(
    feature = "NEAppProxyProvider",
    feature = "NEProvider",
    feature = "NETunnelProvider"
))]
pub use self::__NEAppProxyProvider::NEAppProxyProvider;
#[cfg(all(
    feature = "NEAppProxyProviderManager",
    feature = "NETunnelProviderManager",
    feature = "NEVPNManager"
))]
pub use self::__NEAppProxyProviderManager::NEAppProxyProviderManager;
#[cfg(all(feature = "NEAppProxyFlow", feature = "NEAppProxyTCPFlow"))]
pub use self::__NEAppProxyTCPFlow::NEAppProxyTCPFlow;
#[cfg(all(feature = "NEAppProxyFlow", feature = "NEAppProxyUDPFlow"))]
pub use self::__NEAppProxyUDPFlow::NEAppProxyUDPFlow;
#[cfg(feature = "NEAppProxyUDPFlow")]
pub use self::__NEAppProxyUDPFlow::NWEndpointArray;
#[cfg(feature = "NEAppPushManager")]
pub use self::__NEAppPushManager::NEAppPushDelegate;
#[cfg(feature = "NEAppPushManager")]
pub use self::__NEAppPushManager::NEAppPushErrorDomain;
#[cfg(feature = "NEAppPushManager")]
pub use self::__NEAppPushManager::NEAppPushManager;
#[cfg(feature = "NEAppPushManager")]
pub use self::__NEAppPushManager::NEAppPushManagerError;
#[cfg(feature = "NEAppPushManager")]
pub use self::__NEAppPushManager::NEPrivateLTENetwork;
#[cfg(all(feature = "NEAppPushProvider", feature = "NEProvider"))]
pub use self::__NEAppPushProvider::NEAppPushProvider;
#[cfg(feature = "NEAppRule")]
pub use self::__NEAppRule::NEAppRule;
#[cfg(feature = "NEDNSProxyManager")]
pub use self::__NEDNSProxyManager::NEDNSProxyConfigurationDidChangeNotification;
#[cfg(feature = "NEDNSProxyManager")]
pub use self::__NEDNSProxyManager::NEDNSProxyErrorDomain;
#[cfg(feature = "NEDNSProxyManager")]
pub use self::__NEDNSProxyManager::NEDNSProxyManager;
#[cfg(feature = "NEDNSProxyManager")]
pub use self::__NEDNSProxyManager::NEDNSProxyManagerError;
#[cfg(all(feature = "NEDNSProxyProvider", feature = "NEProvider"))]
pub use self::__NEDNSProxyProvider::NEDNSProxyProvider;
#[cfg(all(feature = "NEDNSProxyProviderProtocol", feature = "NEVPNProtocol"))]
pub use self::__NEDNSProxyProviderProtocol::NEDNSProxyProviderProtocol;
#[cfg(feature = "NEDNSSettings")]
pub use self::__NEDNSSettings::NEDNSOverHTTPSSettings;
#[cfg(feature = "NEDNSSettings")]
pub use self::__NEDNSSettings::NEDNSOverTLSSettings;
#[cfg(feature = "NEDNSSettings")]
pub use self::__NEDNSSettings::NEDNSProtocol;
#[cfg(feature = "NEDNSSettings")]
pub use self::__NEDNSSettings::NEDNSSettings;
#[cfg(feature = "NEDNSSettingsManager")]
pub use self::__NEDNSSettingsManager::NEDNSSettingsConfigurationDidChangeNotification;
#[cfg(feature = "NEDNSSettingsManager")]
pub use self::__NEDNSSettingsManager::NEDNSSettingsErrorDomain;
#[cfg(feature = "NEDNSSettingsManager")]
pub use self::__NEDNSSettingsManager::NEDNSSettingsManager;
#[cfg(feature = "NEDNSSettingsManager")]
pub use self::__NEDNSSettingsManager::NEDNSSettingsManagerError;
#[cfg(all(
    feature = "NEEthernetTunnelNetworkSettings",
    feature = "NEPacketTunnelNetworkSettings",
    feature = "NETunnelNetworkSettings"
))]
pub use self::__NEEthernetTunnelNetworkSettings::NEEthernetTunnelNetworkSettings;
#[cfg(all(
    feature = "NEEthernetTunnelProvider",
    feature = "NEPacketTunnelProvider",
    feature = "NEProvider",
    feature = "NETunnelProvider"
))]
pub use self::__NEEthernetTunnelProvider::NEEthernetTunnelProvider;
#[cfg(all(
    feature = "NEFilterControlProvider",
    feature = "NEFilterProvider",
    feature = "NEProvider"
))]
pub use self::__NEFilterControlProvider::NEFilterControlProvider;
#[cfg(feature = "NEFilterDataProvider")]
pub use self::__NEFilterDataProvider::NEFilterDataAttribute;
#[cfg(all(
    feature = "NEFilterDataProvider",
    feature = "NEFilterProvider",
    feature = "NEProvider"
))]
pub use self::__NEFilterDataProvider::NEFilterDataProvider;
#[cfg(all(feature = "NEFilterDataProvider", feature = "NEFilterProvider"))]
pub use self::__NEFilterDataProvider::NEFilterDataVerdict;
#[cfg(all(feature = "NEFilterDataProvider", feature = "NEFilterProvider"))]
pub use self::__NEFilterDataProvider::NEFilterRemediationVerdict;
#[cfg(feature = "NEFilterFlow")]
pub use self::__NEFilterFlow::NEFilterBrowserFlow;
#[cfg(feature = "NEFilterFlow")]
pub use self::__NEFilterFlow::NEFilterFlow;
#[cfg(feature = "NEFilterFlow")]
pub use self::__NEFilterFlow::NEFilterSocketFlow;
#[cfg(feature = "NEFilterManager")]
pub use self::__NEFilterManager::NEFilterConfigurationDidChangeNotification;
#[cfg(feature = "NEFilterManager")]
pub use self::__NEFilterManager::NEFilterErrorDomain;
#[cfg(feature = "NEFilterManager")]
pub use self::__NEFilterManager::NEFilterManager;
#[cfg(feature = "NEFilterManager")]
pub use self::__NEFilterManager::NEFilterManagerError;
#[cfg(feature = "NEFilterManager")]
pub use self::__NEFilterManager::NEFilterManagerGrade;
#[cfg(feature = "NEFilterPacketProvider")]
pub use self::__NEFilterPacketProvider::NEFilterPacketContext;
#[cfg(all(
    feature = "NEFilterPacketProvider",
    feature = "NEFilterProvider",
    feature = "NEProvider"
))]
pub use self::__NEFilterPacketProvider::NEFilterPacketProvider;
#[cfg(feature = "NEFilterPacketProvider")]
pub use self::__NEFilterPacketProvider::NEFilterPacketProviderVerdict;
#[cfg(feature = "NEFilterProvider")]
pub use self::__NEFilterProvider::NEFilterAction;
#[cfg(feature = "NEFilterProvider")]
pub use self::__NEFilterProvider::NEFilterControlVerdict;
#[cfg(feature = "NEFilterProvider")]
pub use self::__NEFilterProvider::NEFilterNewFlowVerdict;
#[cfg(all(feature = "NEFilterProvider", feature = "NEProvider"))]
pub use self::__NEFilterProvider::NEFilterProvider;
#[cfg(feature = "NEFilterProvider")]
pub use self::__NEFilterProvider::NEFilterReport;
#[cfg(feature = "NEFilterProvider")]
pub use self::__NEFilterProvider::NEFilterReportEvent;
#[cfg(feature = "NEFilterProvider")]
pub use self::__NEFilterProvider::NEFilterReportFrequency;
#[cfg(feature = "NEFilterProvider")]
pub use self::__NEFilterProvider::NEFilterVerdict;
#[cfg(feature = "NEFilterProviderConfiguration")]
pub use self::__NEFilterProviderConfiguration::NEFilterProviderConfiguration;
#[cfg(feature = "NEFilterRule")]
pub use self::__NEFilterRule::NEFilterRule;
#[cfg(feature = "NEFilterSettings")]
pub use self::__NEFilterSettings::NEFilterSettings;
#[cfg(feature = "NEFlowMetaData")]
pub use self::__NEFlowMetaData::NEFlowMetaData;
#[cfg(feature = "NEHotspotConfigurationManager")]
pub use self::__NEHotspotConfigurationManager::NEHotspotConfiguration;
#[cfg(feature = "NEHotspotConfigurationManager")]
pub use self::__NEHotspotConfigurationManager::NEHotspotConfigurationEAPTLSVersion;
#[cfg(feature = "NEHotspotConfigurationManager")]
pub use self::__NEHotspotConfigurationManager::NEHotspotConfigurationEAPType;
#[cfg(feature = "NEHotspotConfigurationManager")]
pub use self::__NEHotspotConfigurationManager::NEHotspotConfigurationError;
#[cfg(feature = "NEHotspotConfigurationManager")]
pub use self::__NEHotspotConfigurationManager::NEHotspotConfigurationErrorDomain;
#[cfg(feature = "NEHotspotConfigurationManager")]
pub use self::__NEHotspotConfigurationManager::NEHotspotConfigurationManager;
#[cfg(feature = "NEHotspotConfigurationManager")]
pub use self::__NEHotspotConfigurationManager::NEHotspotConfigurationTTLSInnerAuthenticationType;
#[cfg(feature = "NEHotspotConfigurationManager")]
pub use self::__NEHotspotConfigurationManager::NEHotspotEAPSettings;
#[cfg(feature = "NEHotspotConfigurationManager")]
pub use self::__NEHotspotConfigurationManager::NEHotspotHS20Settings;
#[cfg(feature = "NEHotspotHelper")]
pub use self::__NEHotspotHelper::NEHotspotHelper;
#[cfg(feature = "NEHotspotHelper")]
pub use self::__NEHotspotHelper::NEHotspotHelperCommand;
#[cfg(feature = "NEHotspotHelper")]
pub use self::__NEHotspotHelper::NEHotspotHelperCommandType;
#[cfg(feature = "NEHotspotHelper")]
pub use self::__NEHotspotHelper::NEHotspotHelperConfidence;
#[cfg(all(feature = "NEHotspotHelper", feature = "block2"))]
pub use self::__NEHotspotHelper::NEHotspotHelperHandler;
#[cfg(feature = "NEHotspotHelper")]
pub use self::__NEHotspotHelper::NEHotspotHelperResponse;
#[cfg(feature = "NEHotspotHelper")]
pub use self::__NEHotspotHelper::NEHotspotHelperResult;
#[cfg(feature = "NEHotspotHelper")]
pub use self::__NEHotspotHelper::NSMutableURLRequestNEHotspotHelper;
#[cfg(feature = "NEHotspotNetwork")]
pub use self::__NEHotspotNetwork::NEHotspotNetwork;
#[cfg(feature = "NEHotspotNetwork")]
pub use self::__NEHotspotNetwork::NEHotspotNetworkSecurityType;
#[cfg(feature = "NEIPv4Settings")]
pub use self::__NEIPv4Settings::NEIPv4Route;
#[cfg(feature = "NEIPv4Settings")]
pub use self::__NEIPv4Settings::NEIPv4Settings;
#[cfg(feature = "NEIPv6Settings")]
pub use self::__NEIPv6Settings::NEIPv6Route;
#[cfg(feature = "NEIPv6Settings")]
pub use self::__NEIPv6Settings::NEIPv6Settings;
#[cfg(feature = "NENetworkRule")]
pub use self::__NENetworkRule::NENetworkRule;
#[cfg(feature = "NENetworkRule")]
pub use self::__NENetworkRule::NENetworkRuleProtocol;
#[cfg(feature = "NENetworkRule")]
pub use self::__NENetworkRule::NETrafficDirection;
#[cfg(feature = "NEOnDemandRule")]
pub use self::__NEOnDemandRule::NEEvaluateConnectionRule;
#[cfg(feature = "NEOnDemandRule")]
pub use self::__NEOnDemandRule::NEEvaluateConnectionRuleAction;
#[cfg(feature = "NEOnDemandRule")]
pub use self::__NEOnDemandRule::NEOnDemandRule;
#[cfg(feature = "NEOnDemandRule")]
pub use self::__NEOnDemandRule::NEOnDemandRuleAction;
#[cfg(feature = "NEOnDemandRule")]
pub use self::__NEOnDemandRule::NEOnDemandRuleConnect;
#[cfg(feature = "NEOnDemandRule")]
pub use self::__NEOnDemandRule::NEOnDemandRuleDisconnect;
#[cfg(feature = "NEOnDemandRule")]
pub use self::__NEOnDemandRule::NEOnDemandRuleEvaluateConnection;
#[cfg(feature = "NEOnDemandRule")]
pub use self::__NEOnDemandRule::NEOnDemandRuleIgnore;
#[cfg(feature = "NEOnDemandRule")]
pub use self::__NEOnDemandRule::NEOnDemandRuleInterfaceType;
#[cfg(feature = "NEPacket")]
pub use self::__NEPacket::NEPacket;
#[cfg(feature = "NEPacketTunnelFlow")]
pub use self::__NEPacketTunnelFlow::NEPacketTunnelFlow;
#[cfg(all(
    feature = "NEPacketTunnelNetworkSettings",
    feature = "NETunnelNetworkSettings"
))]
pub use self::__NEPacketTunnelNetworkSettings::NEPacketTunnelNetworkSettings;
#[cfg(all(
    feature = "NEPacketTunnelProvider",
    feature = "NEProvider",
    feature = "NETunnelProvider"
))]
pub use self::__NEPacketTunnelProvider::NEPacketTunnelProvider;
#[cfg(feature = "NEProvider")]
pub use self::__NEProvider::NEProvider;
#[cfg(feature = "NEProvider")]
pub use self::__NEProvider::NEProviderStopReason;
#[cfg(feature = "NEProxySettings")]
pub use self::__NEProxySettings::NEProxyServer;
#[cfg(feature = "NEProxySettings")]
pub use self::__NEProxySettings::NEProxySettings;
#[cfg(feature = "NERelay")]
pub use self::__NERelay::NERelay;
#[cfg(feature = "NERelayManager")]
pub use self::__NERelayManager::NERelayClientErrorDomain;
#[cfg(feature = "NERelayManager")]
pub use self::__NERelayManager::NERelayConfigurationDidChangeNotification;
#[cfg(feature = "NERelayManager")]
pub use self::__NERelayManager::NERelayErrorDomain;
#[cfg(feature = "NERelayManager")]
pub use self::__NERelayManager::NERelayManager;
#[cfg(feature = "NERelayManager")]
pub use self::__NERelayManager::NERelayManagerClientError;
#[cfg(feature = "NERelayManager")]
pub use self::__NERelayManager::NERelayManagerError;
#[cfg(all(feature = "NETransparentProxyManager", feature = "NEVPNManager"))]
pub use self::__NETransparentProxyManager::NETransparentProxyManager;
#[cfg(all(
    feature = "NETransparentProxyNetworkSettings",
    feature = "NETunnelNetworkSettings"
))]
pub use self::__NETransparentProxyNetworkSettings::NETransparentProxyNetworkSettings;
#[cfg(all(
    feature = "NEAppProxyProvider",
    feature = "NEProvider",
    feature = "NETransparentProxyProvider",
    feature = "NETunnelProvider"
))]
pub use self::__NETransparentProxyProvider::NETransparentProxyProvider;
#[cfg(feature = "NETunnelNetworkSettings")]
pub use self::__NETunnelNetworkSettings::NETunnelNetworkSettings;
#[cfg(all(feature = "NEProvider", feature = "NETunnelProvider"))]
pub use self::__NETunnelProvider::NETunnelProvider;
#[cfg(feature = "NETunnelProvider")]
pub use self::__NETunnelProvider::NETunnelProviderError;
#[cfg(feature = "NETunnelProvider")]
pub use self::__NETunnelProvider::NETunnelProviderErrorDomain;
#[cfg(feature = "NETunnelProvider")]
pub use self::__NETunnelProvider::NETunnelProviderRoutingMethod;
#[cfg(all(feature = "NETunnelProviderManager", feature = "NEVPNManager"))]
pub use self::__NETunnelProviderManager::NETunnelProviderManager;
#[cfg(all(feature = "NETunnelProviderProtocol", feature = "NEVPNProtocol"))]
pub use self::__NETunnelProviderProtocol::NETunnelProviderProtocol;
#[cfg(all(feature = "NETunnelProviderSession", feature = "NEVPNConnection"))]
pub use self::__NETunnelProviderSession::NETunnelProviderSession;
#[cfg(feature = "NEVPNConnection")]
pub use self::__NEVPNConnection::NEVPNConnection;
#[cfg(feature = "NEVPNConnection")]
pub use self::__NEVPNConnection::NEVPNConnectionError;
#[cfg(feature = "NEVPNConnection")]
pub use self::__NEVPNConnection::NEVPNConnectionErrorDomain;
#[cfg(feature = "NEVPNConnection")]
pub use self::__NEVPNConnection::NEVPNConnectionStartOptionPassword;
#[cfg(feature = "NEVPNConnection")]
pub use self::__NEVPNConnection::NEVPNConnectionStartOptionUsername;
#[cfg(feature = "NEVPNConnection")]
pub use self::__NEVPNConnection::NEVPNStatus;
#[cfg(feature = "NEVPNConnection")]
pub use self::__NEVPNConnection::NEVPNStatusDidChangeNotification;
#[cfg(feature = "NEVPNManager")]
pub use self::__NEVPNManager::NEVPNConfigurationChangeNotification;
#[cfg(feature = "NEVPNManager")]
pub use self::__NEVPNManager::NEVPNError;
#[cfg(feature = "NEVPNManager")]
pub use self::__NEVPNManager::NEVPNErrorDomain;
#[cfg(feature = "NEVPNManager")]
pub use self::__NEVPNManager::NEVPNManager;
#[cfg(feature = "NEVPNProtocol")]
pub use self::__NEVPNProtocol::NEVPNProtocol;
#[cfg(feature = "NEVPNProtocolIKEv2")]
pub use self::__NEVPNProtocolIKEv2::NEVPNIKEv2CertificateType;
#[cfg(feature = "NEVPNProtocolIKEv2")]
pub use self::__NEVPNProtocolIKEv2::NEVPNIKEv2DeadPeerDetectionRate;
#[cfg(feature = "NEVPNProtocolIKEv2")]
pub use self::__NEVPNProtocolIKEv2::NEVPNIKEv2DiffieHellmanGroup;
#[cfg(feature = "NEVPNProtocolIKEv2")]
pub use self::__NEVPNProtocolIKEv2::NEVPNIKEv2EncryptionAlgorithm;
#[cfg(feature = "NEVPNProtocolIKEv2")]
pub use self::__NEVPNProtocolIKEv2::NEVPNIKEv2IntegrityAlgorithm;
#[cfg(feature = "NEVPNProtocolIKEv2")]
pub use self::__NEVPNProtocolIKEv2::NEVPNIKEv2PPKConfiguration;
#[cfg(feature = "NEVPNProtocolIKEv2")]
pub use self::__NEVPNProtocolIKEv2::NEVPNIKEv2SecurityAssociationParameters;
#[cfg(feature = "NEVPNProtocolIKEv2")]
pub use self::__NEVPNProtocolIKEv2::NEVPNIKEv2TLSVersion;
#[cfg(all(
    feature = "NEVPNProtocol",
    feature = "NEVPNProtocolIKEv2",
    feature = "NEVPNProtocolIPSec"
))]
pub use self::__NEVPNProtocolIKEv2::NEVPNProtocolIKEv2;
#[cfg(feature = "NEVPNProtocolIPSec")]
pub use self::__NEVPNProtocolIPSec::NEVPNIKEAuthenticationMethod;
#[cfg(all(feature = "NEVPNProtocol", feature = "NEVPNProtocolIPSec"))]
pub use self::__NEVPNProtocolIPSec::NEVPNProtocolIPSec;
#[cfg(all(feature = "NWBonjourServiceEndpoint", feature = "NWEndpoint"))]
pub use self::__NWBonjourServiceEndpoint::NWBonjourServiceEndpoint;
#[cfg(feature = "NWEndpoint")]
pub use self::__NWEndpoint::NWEndpoint;
#[cfg(all(feature = "NWEndpoint", feature = "NWHostEndpoint"))]
pub use self::__NWHostEndpoint::NWHostEndpoint;
#[cfg(feature = "NWPath")]
pub use self::__NWPath::NWPath;
#[cfg(feature = "NWPath")]
pub use self::__NWPath::NWPathStatus;
#[cfg(feature = "NWTCPConnection")]
pub use self::__NWTCPConnection::NWTCPConnection;
#[cfg(feature = "NWTCPConnection")]
pub use self::__NWTCPConnection::NWTCPConnectionAuthenticationDelegate;
#[cfg(feature = "NWTCPConnection")]
pub use self::__NWTCPConnection::NWTCPConnectionState;
#[cfg(feature = "NWTLSParameters")]
pub use self::__NWTLSParameters::NWTLSParameters;
#[cfg(feature = "NWUDPSession")]
pub use self::__NWUDPSession::NWUDPSession;
#[cfg(feature = "NWUDPSession")]
pub use self::__NWUDPSession::NWUDPSessionState;
