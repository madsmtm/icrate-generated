//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;

use crate::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CLBackgroundActivitySessionDiagnostic;

    unsafe impl ClassType for CLBackgroundActivitySessionDiagnostic {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSObjectProtocol for CLBackgroundActivitySessionDiagnostic {}

extern_methods!(
    unsafe impl CLBackgroundActivitySessionDiagnostic {
        #[method(authorizationDenied)]
        pub unsafe fn authorizationDenied(&self) -> bool;

        #[method(authorizationDeniedGlobally)]
        pub unsafe fn authorizationDeniedGlobally(&self) -> bool;

        #[method(authorizationRestricted)]
        pub unsafe fn authorizationRestricted(&self) -> bool;

        #[method(insufficientlyInUse)]
        pub unsafe fn insufficientlyInUse(&self) -> bool;

        #[method(serviceSessionRequired)]
        pub unsafe fn serviceSessionRequired(&self) -> bool;

        #[method(authorizationRequestInProgress)]
        pub unsafe fn authorizationRequestInProgress(&self) -> bool;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl CLBackgroundActivitySessionDiagnostic {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct CLBackgroundActivitySession;

    unsafe impl ClassType for CLBackgroundActivitySession {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSObjectProtocol for CLBackgroundActivitySession {}

extern_methods!(
    unsafe impl CLBackgroundActivitySession {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[method(invalidate)]
        pub unsafe fn invalidate(&self);

        #[method_id(@__retain_semantics Other backgroundActivitySession)]
        pub unsafe fn backgroundActivitySession() -> Retained<Self>;

        #[cfg(feature = "block2")]
        #[method_id(@__retain_semantics Other backgroundActivitySessionWithQueue:handler:)]
        pub unsafe fn backgroundActivitySessionWithQueue_handler(
            queue: &dispatch_queue_t,
            handler: &block2::Block<dyn Fn(NonNull<CLBackgroundActivitySessionDiagnostic>)>,
        ) -> Retained<Self>;
    }
);
