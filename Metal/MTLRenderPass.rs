//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

#[repr(C)]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct MTLClearColor {
    pub red: c_double,
    pub green: c_double,
    pub blue: c_double,
    pub alpha: c_double,
}

unsafe impl Encode for MTLClearColor {
    const ENCODING: Encoding = Encoding::Struct(
        "?",
        &[
            <c_double>::ENCODING,
            <c_double>::ENCODING,
            <c_double>::ENCODING,
            <c_double>::ENCODING,
        ],
    );
}

unsafe impl RefEncode for MTLClearColor {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

// TODO: pub fn MTLClearColorMake(red: c_double,green: c_double,blue: c_double,alpha: c_double,) -> MTLClearColor;

// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MTLLoadAction(pub NSUInteger);
impl MTLLoadAction {
    #[doc(alias = "MTLLoadActionDontCare")]
    pub const DontCare: Self = Self(0);
    #[doc(alias = "MTLLoadActionLoad")]
    pub const Load: Self = Self(1);
    #[doc(alias = "MTLLoadActionClear")]
    pub const Clear: Self = Self(2);
}

unsafe impl Encode for MTLLoadAction {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for MTLLoadAction {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MTLStoreAction(pub NSUInteger);
impl MTLStoreAction {
    #[doc(alias = "MTLStoreActionDontCare")]
    pub const DontCare: Self = Self(0);
    #[doc(alias = "MTLStoreActionStore")]
    pub const Store: Self = Self(1);
    #[doc(alias = "MTLStoreActionMultisampleResolve")]
    pub const MultisampleResolve: Self = Self(2);
    #[doc(alias = "MTLStoreActionStoreAndMultisampleResolve")]
    pub const StoreAndMultisampleResolve: Self = Self(3);
    #[doc(alias = "MTLStoreActionUnknown")]
    pub const Unknown: Self = Self(4);
    #[doc(alias = "MTLStoreActionCustomSampleDepthStore")]
    pub const CustomSampleDepthStore: Self = Self(5);
}

unsafe impl Encode for MTLStoreAction {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for MTLStoreAction {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MTLStoreActionOptions(pub NSUInteger);
bitflags::bitflags! {
    impl MTLStoreActionOptions: NSUInteger {
        const MTLStoreActionOptionNone = 0;
        const MTLStoreActionOptionCustomSamplePositions = 1<<0;
    }
}

unsafe impl Encode for MTLStoreActionOptions {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for MTLStoreActionOptions {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLRenderPassAttachmentDescriptor;

    unsafe impl ClassType for MTLRenderPassAttachmentDescriptor {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSCopying for MTLRenderPassAttachmentDescriptor {}

unsafe impl NSObjectProtocol for MTLRenderPassAttachmentDescriptor {}

extern_methods!(
    unsafe impl MTLRenderPassAttachmentDescriptor {
        #[cfg(all(feature = "MTLResource", feature = "MTLTexture"))]
        #[method_id(@__retain_semantics Other texture)]
        pub fn texture(&self) -> Option<Retained<ProtocolObject<dyn MTLTexture>>>;

        #[cfg(all(feature = "MTLResource", feature = "MTLTexture"))]
        #[method(setTexture:)]
        pub fn set_texture(&self, texture: Option<&ProtocolObject<dyn MTLTexture>>);

        #[method(level)]
        pub fn level(&self) -> NSUInteger;

        #[method(setLevel:)]
        pub fn set_level(&self, level: NSUInteger);

        #[method(slice)]
        pub fn slice(&self) -> NSUInteger;

        #[method(setSlice:)]
        pub fn set_slice(&self, slice: NSUInteger);

        #[method(depthPlane)]
        pub fn depth_plane(&self) -> NSUInteger;

        #[method(setDepthPlane:)]
        pub fn set_depth_plane(&self, depth_plane: NSUInteger);

        #[cfg(all(feature = "MTLResource", feature = "MTLTexture"))]
        #[method_id(@__retain_semantics Other resolveTexture)]
        pub fn resolve_texture(&self) -> Option<Retained<ProtocolObject<dyn MTLTexture>>>;

        #[cfg(all(feature = "MTLResource", feature = "MTLTexture"))]
        #[method(setResolveTexture:)]
        pub fn set_resolve_texture(&self, resolve_texture: Option<&ProtocolObject<dyn MTLTexture>>);

        #[method(resolveLevel)]
        pub fn resolve_level(&self) -> NSUInteger;

        #[method(setResolveLevel:)]
        pub fn set_resolve_level(&self, resolve_level: NSUInteger);

        #[method(resolveSlice)]
        pub fn resolve_slice(&self) -> NSUInteger;

        #[method(setResolveSlice:)]
        pub fn set_resolve_slice(&self, resolve_slice: NSUInteger);

        #[method(resolveDepthPlane)]
        pub fn resolve_depth_plane(&self) -> NSUInteger;

        #[method(setResolveDepthPlane:)]
        pub fn set_resolve_depth_plane(&self, resolve_depth_plane: NSUInteger);

        #[method(loadAction)]
        pub fn load_action(&self) -> MTLLoadAction;

        #[method(setLoadAction:)]
        pub fn set_load_action(&self, load_action: MTLLoadAction);

        #[method(storeAction)]
        pub fn store_action(&self) -> MTLStoreAction;

        #[method(setStoreAction:)]
        pub fn set_store_action(&self, store_action: MTLStoreAction);

        #[method(storeActionOptions)]
        pub fn store_action_options(&self) -> MTLStoreActionOptions;

        #[method(setStoreActionOptions:)]
        pub fn set_store_action_options(&self, store_action_options: MTLStoreActionOptions);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MTLRenderPassAttachmentDescriptor {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLRenderPassColorAttachmentDescriptor;

    unsafe impl ClassType for MTLRenderPassColorAttachmentDescriptor {
        #[inherits(NSObject)]
        type Super = MTLRenderPassAttachmentDescriptor;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSCopying for MTLRenderPassColorAttachmentDescriptor {}

unsafe impl NSObjectProtocol for MTLRenderPassColorAttachmentDescriptor {}

extern_methods!(
    unsafe impl MTLRenderPassColorAttachmentDescriptor {
        #[method(clearColor)]
        pub fn clear_color(&self) -> MTLClearColor;

        #[method(setClearColor:)]
        pub fn set_clear_color(&self, clear_color: MTLClearColor);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MTLRenderPassColorAttachmentDescriptor {
        #[method_id(@__retain_semantics Init init)]
        pub fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub fn new() -> Retained<Self>;
    }
);

impl DefaultRetained for MTLRenderPassColorAttachmentDescriptor {
    #[inline]
    fn default_id() -> Retained<Self> {
        Self::new()
    }
}

// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MTLMultisampleDepthResolveFilter(pub NSUInteger);
impl MTLMultisampleDepthResolveFilter {
    #[doc(alias = "MTLMultisampleDepthResolveFilterSample0")]
    pub const Sample0: Self = Self(0);
    #[doc(alias = "MTLMultisampleDepthResolveFilterMin")]
    pub const Min: Self = Self(1);
    #[doc(alias = "MTLMultisampleDepthResolveFilterMax")]
    pub const Max: Self = Self(2);
}

unsafe impl Encode for MTLMultisampleDepthResolveFilter {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for MTLMultisampleDepthResolveFilter {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLRenderPassDepthAttachmentDescriptor;

    unsafe impl ClassType for MTLRenderPassDepthAttachmentDescriptor {
        #[inherits(NSObject)]
        type Super = MTLRenderPassAttachmentDescriptor;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSCopying for MTLRenderPassDepthAttachmentDescriptor {}

unsafe impl NSObjectProtocol for MTLRenderPassDepthAttachmentDescriptor {}

extern_methods!(
    unsafe impl MTLRenderPassDepthAttachmentDescriptor {
        #[method(clearDepth)]
        pub fn clear_depth(&self) -> c_double;

        #[method(setClearDepth:)]
        pub fn set_clear_depth(&self, clear_depth: c_double);

        #[method(depthResolveFilter)]
        pub fn depth_resolve_filter(&self) -> MTLMultisampleDepthResolveFilter;

        #[method(setDepthResolveFilter:)]
        pub fn set_depth_resolve_filter(
            &self,
            depth_resolve_filter: MTLMultisampleDepthResolveFilter,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MTLRenderPassDepthAttachmentDescriptor {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MTLMultisampleStencilResolveFilter(pub NSUInteger);
impl MTLMultisampleStencilResolveFilter {
    #[doc(alias = "MTLMultisampleStencilResolveFilterSample0")]
    pub const Sample0: Self = Self(0);
    #[doc(alias = "MTLMultisampleStencilResolveFilterDepthResolvedSample")]
    pub const DepthResolvedSample: Self = Self(1);
}

unsafe impl Encode for MTLMultisampleStencilResolveFilter {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for MTLMultisampleStencilResolveFilter {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLRenderPassStencilAttachmentDescriptor;

    unsafe impl ClassType for MTLRenderPassStencilAttachmentDescriptor {
        #[inherits(NSObject)]
        type Super = MTLRenderPassAttachmentDescriptor;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSCopying for MTLRenderPassStencilAttachmentDescriptor {}

unsafe impl NSObjectProtocol for MTLRenderPassStencilAttachmentDescriptor {}

extern_methods!(
    unsafe impl MTLRenderPassStencilAttachmentDescriptor {
        #[method(clearStencil)]
        pub fn clear_stencil(&self) -> u32;

        #[method(setClearStencil:)]
        pub fn set_clear_stencil(&self, clear_stencil: u32);

        #[method(stencilResolveFilter)]
        pub fn stencil_resolve_filter(&self) -> MTLMultisampleStencilResolveFilter;

        #[method(setStencilResolveFilter:)]
        pub fn set_stencil_resolve_filter(
            &self,
            stencil_resolve_filter: MTLMultisampleStencilResolveFilter,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MTLRenderPassStencilAttachmentDescriptor {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLRenderPassColorAttachmentDescriptorArray;

    unsafe impl ClassType for MTLRenderPassColorAttachmentDescriptorArray {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSObjectProtocol for MTLRenderPassColorAttachmentDescriptorArray {}

extern_methods!(
    unsafe impl MTLRenderPassColorAttachmentDescriptorArray {
        #[method_id(@__retain_semantics Other objectAtIndexedSubscript:)]
        pub unsafe fn object_at_indexed_subscript(
            &self,
            attachment_index: NSUInteger,
        ) -> Retained<MTLRenderPassColorAttachmentDescriptor>;

        #[method(setObject:atIndexedSubscript:)]
        pub unsafe fn set_object_at_indexed_subscript(
            &self,
            attachment: Option<&MTLRenderPassColorAttachmentDescriptor>,
            attachment_index: NSUInteger,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MTLRenderPassColorAttachmentDescriptorArray {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLRenderPassSampleBufferAttachmentDescriptor;

    unsafe impl ClassType for MTLRenderPassSampleBufferAttachmentDescriptor {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSCopying for MTLRenderPassSampleBufferAttachmentDescriptor {}

unsafe impl NSObjectProtocol for MTLRenderPassSampleBufferAttachmentDescriptor {}

extern_methods!(
    unsafe impl MTLRenderPassSampleBufferAttachmentDescriptor {
        #[cfg(feature = "MTLCounters")]
        #[method_id(@__retain_semantics Other sampleBuffer)]
        pub fn sample_buffer(&self)
            -> Option<Retained<ProtocolObject<dyn MTLCounterSampleBuffer>>>;

        #[cfg(feature = "MTLCounters")]
        #[method(setSampleBuffer:)]
        pub fn set_sample_buffer(
            &self,
            sample_buffer: Option<&ProtocolObject<dyn MTLCounterSampleBuffer>>,
        );

        #[method(startOfVertexSampleIndex)]
        pub fn start_of_vertex_sample_index(&self) -> NSUInteger;

        #[method(setStartOfVertexSampleIndex:)]
        pub unsafe fn set_start_of_vertex_sample_index(
            &self,
            start_of_vertex_sample_index: NSUInteger,
        );

        #[method(endOfVertexSampleIndex)]
        pub fn end_of_vertex_sample_index(&self) -> NSUInteger;

        #[method(setEndOfVertexSampleIndex:)]
        pub unsafe fn set_end_of_vertex_sample_index(&self, end_of_vertex_sample_index: NSUInteger);

        #[method(startOfFragmentSampleIndex)]
        pub fn start_of_fragment_sample_index(&self) -> NSUInteger;

        #[method(setStartOfFragmentSampleIndex:)]
        pub unsafe fn set_start_of_fragment_sample_index(
            &self,
            start_of_fragment_sample_index: NSUInteger,
        );

        #[method(endOfFragmentSampleIndex)]
        pub fn end_of_fragment_sample_index(&self) -> NSUInteger;

        #[method(setEndOfFragmentSampleIndex:)]
        pub unsafe fn set_end_of_fragment_sample_index(
            &self,
            end_of_fragment_sample_index: NSUInteger,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MTLRenderPassSampleBufferAttachmentDescriptor {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLRenderPassSampleBufferAttachmentDescriptorArray;

    unsafe impl ClassType for MTLRenderPassSampleBufferAttachmentDescriptorArray {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSObjectProtocol for MTLRenderPassSampleBufferAttachmentDescriptorArray {}

extern_methods!(
    unsafe impl MTLRenderPassSampleBufferAttachmentDescriptorArray {
        #[method_id(@__retain_semantics Other objectAtIndexedSubscript:)]
        pub unsafe fn object_at_indexed_subscript(
            &self,
            attachment_index: NSUInteger,
        ) -> Retained<MTLRenderPassSampleBufferAttachmentDescriptor>;

        #[method(setObject:atIndexedSubscript:)]
        pub unsafe fn set_object_at_indexed_subscript(
            &self,
            attachment: Option<&MTLRenderPassSampleBufferAttachmentDescriptor>,
            attachment_index: NSUInteger,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MTLRenderPassSampleBufferAttachmentDescriptorArray {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLRenderPassDescriptor;

    unsafe impl ClassType for MTLRenderPassDescriptor {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSCopying for MTLRenderPassDescriptor {}

unsafe impl NSObjectProtocol for MTLRenderPassDescriptor {}

extern_methods!(
    unsafe impl MTLRenderPassDescriptor {
        #[method_id(@__retain_semantics Other renderPassDescriptor)]
        pub fn render_pass_descriptor() -> Retained<MTLRenderPassDescriptor>;

        #[method_id(@__retain_semantics Other colorAttachments)]
        pub fn color_attachments(&self) -> Retained<MTLRenderPassColorAttachmentDescriptorArray>;

        #[method_id(@__retain_semantics Other depthAttachment)]
        pub fn depth_attachment(&self) -> Retained<MTLRenderPassDepthAttachmentDescriptor>;

        #[method(setDepthAttachment:)]
        pub fn set_depth_attachment(
            &self,
            depth_attachment: Option<&MTLRenderPassDepthAttachmentDescriptor>,
        );

        #[method_id(@__retain_semantics Other stencilAttachment)]
        pub fn stencil_attachment(&self) -> Retained<MTLRenderPassStencilAttachmentDescriptor>;

        #[method(setStencilAttachment:)]
        pub fn set_stencil_attachment(
            &self,
            stencil_attachment: Option<&MTLRenderPassStencilAttachmentDescriptor>,
        );

        #[cfg(all(feature = "MTLBuffer", feature = "MTLResource"))]
        #[method_id(@__retain_semantics Other visibilityResultBuffer)]
        pub fn visibility_result_buffer(&self) -> Option<Retained<ProtocolObject<dyn MTLBuffer>>>;

        #[cfg(all(feature = "MTLBuffer", feature = "MTLResource"))]
        #[method(setVisibilityResultBuffer:)]
        pub fn set_visibility_result_buffer(
            &self,
            visibility_result_buffer: Option<&ProtocolObject<dyn MTLBuffer>>,
        );

        #[method(renderTargetArrayLength)]
        pub fn render_target_array_length(&self) -> NSUInteger;

        #[method(setRenderTargetArrayLength:)]
        pub unsafe fn set_render_target_array_length(&self, render_target_array_length: NSUInteger);

        #[method(imageblockSampleLength)]
        pub fn imageblock_sample_length(&self) -> NSUInteger;

        #[method(setImageblockSampleLength:)]
        pub unsafe fn set_imageblock_sample_length(&self, imageblock_sample_length: NSUInteger);

        #[method(threadgroupMemoryLength)]
        pub fn threadgroup_memory_length(&self) -> NSUInteger;

        #[method(setThreadgroupMemoryLength:)]
        pub unsafe fn set_threadgroup_memory_length(&self, threadgroup_memory_length: NSUInteger);

        #[method(tileWidth)]
        pub fn tile_width(&self) -> NSUInteger;

        #[method(setTileWidth:)]
        pub fn set_tile_width(&self, tile_width: NSUInteger);

        #[method(tileHeight)]
        pub fn tile_height(&self) -> NSUInteger;

        #[method(setTileHeight:)]
        pub fn set_tile_height(&self, tile_height: NSUInteger);

        #[method(defaultRasterSampleCount)]
        pub fn default_raster_sample_count(&self) -> NSUInteger;

        #[method(setDefaultRasterSampleCount:)]
        pub fn set_default_raster_sample_count(&self, default_raster_sample_count: NSUInteger);

        #[method(renderTargetWidth)]
        pub fn render_target_width(&self) -> NSUInteger;

        #[method(setRenderTargetWidth:)]
        pub fn set_render_target_width(&self, render_target_width: NSUInteger);

        #[method(renderTargetHeight)]
        pub fn render_target_height(&self) -> NSUInteger;

        #[method(setRenderTargetHeight:)]
        pub fn set_render_target_height(&self, render_target_height: NSUInteger);

        #[cfg(feature = "MTLTypes")]
        #[method(setSamplePositions:count:)]
        pub unsafe fn set_sample_positions_count(
            &self,
            positions: *mut MTLSamplePosition,
            count: NSUInteger,
        );

        #[cfg(feature = "MTLTypes")]
        #[method(getSamplePositions:count:)]
        pub unsafe fn get_sample_positions_count(
            &self,
            positions: *mut MTLSamplePosition,
            count: NSUInteger,
        ) -> NSUInteger;

        #[cfg(feature = "MTLRasterizationRate")]
        #[method_id(@__retain_semantics Other rasterizationRateMap)]
        pub fn rasterization_rate_map(
            &self,
        ) -> Option<Retained<ProtocolObject<dyn MTLRasterizationRateMap>>>;

        #[cfg(feature = "MTLRasterizationRate")]
        #[method(setRasterizationRateMap:)]
        pub fn set_rasterization_rate_map(
            &self,
            rasterization_rate_map: Option<&ProtocolObject<dyn MTLRasterizationRateMap>>,
        );

        #[method_id(@__retain_semantics Other sampleBufferAttachments)]
        pub fn sample_buffer_attachments(
            &self,
        ) -> Retained<MTLRenderPassSampleBufferAttachmentDescriptorArray>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MTLRenderPassDescriptor {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

// TODO: pub fn MTLClearColorMake(red: c_double,green: c_double,blue: c_double,alpha: c_double,) -> MTLClearColor;
