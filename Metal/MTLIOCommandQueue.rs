//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;
use crate::Metal::*;

ns_enum!(
    #[underlying(NSInteger)]
    pub enum MTLIOPriority {
        MTLIOPriorityHigh = 0,
        MTLIOPriorityNormal = 1,
        MTLIOPriorityLow = 2,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    pub enum MTLIOCommandQueueType {
        MTLIOCommandQueueTypeConcurrent = 0,
        MTLIOCommandQueueTypeSerial = 1,
    }
);

extern_static!(MTLIOErrorDomain: &'static NSErrorDomain);

ns_error_enum!(
    #[underlying(NSInteger)]
    pub enum MTLIOError {
        MTLIOErrorURLInvalid = 1,
        MTLIOErrorInternal = 2,
    }
);

extern_protocol!(
    pub struct MTLIOCommandQueue;

    unsafe impl ProtocolType for MTLIOCommandQueue {
        #[method(enqueueBarrier)]
        pub unsafe fn enqueueBarrier(&self);

        #[method_id(@__retain_semantics Other commandBuffer)]
        pub unsafe fn commandBuffer(&self) -> Id<MTLIOCommandBuffer, Shared>;

        #[method_id(@__retain_semantics Other commandBufferWithUnretainedReferences)]
        pub unsafe fn commandBufferWithUnretainedReferences(
            &self,
        ) -> Id<MTLIOCommandBuffer, Shared>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other label)]
        pub unsafe fn label(&self) -> Option<Id<NSString, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setLabel:)]
        pub unsafe fn setLabel(&self, label: Option<&NSString>);
    }
);

extern_protocol!(
    pub struct MTLIOScratchBuffer;

    unsafe impl ProtocolType for MTLIOScratchBuffer {
        #[method_id(@__retain_semantics Other buffer)]
        pub unsafe fn buffer(&self) -> Id<MTLBuffer, Shared>;
    }
);

extern_protocol!(
    pub struct MTLIOScratchBufferAllocator;

    unsafe impl ProtocolType for MTLIOScratchBufferAllocator {
        #[method_id(@__retain_semantics New newScratchBufferWithMinimumSize:)]
        pub unsafe fn newScratchBufferWithMinimumSize(
            &self,
            minimum_size: NSUInteger,
        ) -> Option<Id<MTLIOScratchBuffer, Shared>>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "Metal_MTLIOCommandQueueDescriptor")]
    pub struct MTLIOCommandQueueDescriptor;

    #[cfg(feature = "Metal_MTLIOCommandQueueDescriptor")]
    unsafe impl ClassType for MTLIOCommandQueueDescriptor {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "Metal_MTLIOCommandQueueDescriptor")]
    unsafe impl MTLIOCommandQueueDescriptor {
        #[method(maxCommandBufferCount)]
        pub unsafe fn maxCommandBufferCount(&self) -> NSUInteger;

        #[method(setMaxCommandBufferCount:)]
        pub unsafe fn setMaxCommandBufferCount(&self, max_command_buffer_count: NSUInteger);

        #[method(priority)]
        pub unsafe fn priority(&self) -> MTLIOPriority;

        #[method(setPriority:)]
        pub unsafe fn setPriority(&self, priority: MTLIOPriority);

        #[method(type)]
        pub unsafe fn r#type(&self) -> MTLIOCommandQueueType;

        #[method(setType:)]
        pub unsafe fn setType(&self, r#type: MTLIOCommandQueueType);

        #[method(maxCommandsInFlight)]
        pub unsafe fn maxCommandsInFlight(&self) -> NSUInteger;

        #[method(setMaxCommandsInFlight:)]
        pub unsafe fn setMaxCommandsInFlight(&self, max_commands_in_flight: NSUInteger);

        #[method_id(@__retain_semantics Other scratchBufferAllocator)]
        pub unsafe fn scratchBufferAllocator(
            &self,
        ) -> Option<Id<MTLIOScratchBufferAllocator, Shared>>;

        #[method(setScratchBufferAllocator:)]
        pub unsafe fn setScratchBufferAllocator(
            &self,
            scratch_buffer_allocator: Option<&MTLIOScratchBufferAllocator>,
        );
    }
);

extern_protocol!(
    pub struct MTLIOFileHandle;

    unsafe impl ProtocolType for MTLIOFileHandle {
        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other label)]
        pub unsafe fn label(&self) -> Option<Id<NSString, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(setLabel:)]
        pub unsafe fn setLabel(&self, label: Option<&NSString>);
    }
);
