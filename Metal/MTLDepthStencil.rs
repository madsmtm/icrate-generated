//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MTLCompareFunction(pub NSUInteger);
impl MTLCompareFunction {
    #[doc(alias = "MTLCompareFunctionNever")]
    pub const Never: Self = Self(0);
    #[doc(alias = "MTLCompareFunctionLess")]
    pub const Less: Self = Self(1);
    #[doc(alias = "MTLCompareFunctionEqual")]
    pub const Equal: Self = Self(2);
    #[doc(alias = "MTLCompareFunctionLessEqual")]
    pub const LessEqual: Self = Self(3);
    #[doc(alias = "MTLCompareFunctionGreater")]
    pub const Greater: Self = Self(4);
    #[doc(alias = "MTLCompareFunctionNotEqual")]
    pub const NotEqual: Self = Self(5);
    #[doc(alias = "MTLCompareFunctionGreaterEqual")]
    pub const GreaterEqual: Self = Self(6);
    #[doc(alias = "MTLCompareFunctionAlways")]
    pub const Always: Self = Self(7);
}

unsafe impl Encode for MTLCompareFunction {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for MTLCompareFunction {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MTLStencilOperation(pub NSUInteger);
impl MTLStencilOperation {
    #[doc(alias = "MTLStencilOperationKeep")]
    pub const Keep: Self = Self(0);
    #[doc(alias = "MTLStencilOperationZero")]
    pub const Zero: Self = Self(1);
    #[doc(alias = "MTLStencilOperationReplace")]
    pub const Replace: Self = Self(2);
    #[doc(alias = "MTLStencilOperationIncrementClamp")]
    pub const IncrementClamp: Self = Self(3);
    #[doc(alias = "MTLStencilOperationDecrementClamp")]
    pub const DecrementClamp: Self = Self(4);
    #[doc(alias = "MTLStencilOperationInvert")]
    pub const Invert: Self = Self(5);
    #[doc(alias = "MTLStencilOperationIncrementWrap")]
    pub const IncrementWrap: Self = Self(6);
    #[doc(alias = "MTLStencilOperationDecrementWrap")]
    pub const DecrementWrap: Self = Self(7);
}

unsafe impl Encode for MTLStencilOperation {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for MTLStencilOperation {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLStencilDescriptor;

    unsafe impl ClassType for MTLStencilDescriptor {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSCopying for MTLStencilDescriptor {}

unsafe impl NSObjectProtocol for MTLStencilDescriptor {}

extern_methods!(
    unsafe impl MTLStencilDescriptor {
        #[method(stencilCompareFunction)]
        pub fn stencil_compare_function(&self) -> MTLCompareFunction;

        #[method(setStencilCompareFunction:)]
        pub fn set_stencil_compare_function(&self, stencil_compare_function: MTLCompareFunction);

        #[method(stencilFailureOperation)]
        pub fn stencil_failure_operation(&self) -> MTLStencilOperation;

        #[method(setStencilFailureOperation:)]
        pub fn set_stencil_failure_operation(&self, stencil_failure_operation: MTLStencilOperation);

        #[method(depthFailureOperation)]
        pub fn depth_failure_operation(&self) -> MTLStencilOperation;

        #[method(setDepthFailureOperation:)]
        pub fn set_depth_failure_operation(&self, depth_failure_operation: MTLStencilOperation);

        #[method(depthStencilPassOperation)]
        pub fn depth_stencil_pass_operation(&self) -> MTLStencilOperation;

        #[method(setDepthStencilPassOperation:)]
        pub fn set_depth_stencil_pass_operation(
            &self,
            depth_stencil_pass_operation: MTLStencilOperation,
        );

        #[method(readMask)]
        pub fn read_mask(&self) -> u32;

        #[method(setReadMask:)]
        pub fn set_read_mask(&self, read_mask: u32);

        #[method(writeMask)]
        pub fn write_mask(&self) -> u32;

        #[method(setWriteMask:)]
        pub fn set_write_mask(&self, write_mask: u32);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MTLStencilDescriptor {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLDepthStencilDescriptor;

    unsafe impl ClassType for MTLDepthStencilDescriptor {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSCopying for MTLDepthStencilDescriptor {}

unsafe impl NSObjectProtocol for MTLDepthStencilDescriptor {}

extern_methods!(
    unsafe impl MTLDepthStencilDescriptor {
        #[method(depthCompareFunction)]
        pub fn depth_compare_function(&self) -> MTLCompareFunction;

        #[method(setDepthCompareFunction:)]
        pub fn set_depth_compare_function(&self, depth_compare_function: MTLCompareFunction);

        #[method(isDepthWriteEnabled)]
        pub fn is_depth_write_enabled(&self) -> bool;

        #[method(setDepthWriteEnabled:)]
        pub fn set_depth_write_enabled(&self, depth_write_enabled: bool);

        #[method_id(@__retain_semantics Other frontFaceStencil)]
        pub fn front_face_stencil(&self) -> Retained<MTLStencilDescriptor>;

        #[method(setFrontFaceStencil:)]
        pub fn set_front_face_stencil(&self, front_face_stencil: Option<&MTLStencilDescriptor>);

        #[method_id(@__retain_semantics Other backFaceStencil)]
        pub fn back_face_stencil(&self) -> Retained<MTLStencilDescriptor>;

        #[method(setBackFaceStencil:)]
        pub fn set_back_face_stencil(&self, back_face_stencil: Option<&MTLStencilDescriptor>);

        #[method_id(@__retain_semantics Other label)]
        pub fn label(&self) -> Option<Retained<NSString>>;

        #[method(setLabel:)]
        pub fn set_label(&self, label: Option<&NSString>);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MTLDepthStencilDescriptor {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_protocol!(
    pub unsafe trait MTLDepthStencilState: NSObjectProtocol + IsRetainable {
        #[method_id(@__retain_semantics Other label)]
        fn label(&self) -> Option<Retained<NSString>>;

        #[cfg(feature = "MTLDevice")]
        #[method_id(@__retain_semantics Other device)]
        fn device(&self) -> Retained<ProtocolObject<dyn MTLDevice>>;
    }

    unsafe impl ProtocolType for dyn MTLDepthStencilState {}
);
