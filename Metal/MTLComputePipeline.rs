//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLComputePipelineReflection;

    unsafe impl ClassType for MTLComputePipelineReflection {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSObjectProtocol for MTLComputePipelineReflection {}

extern_methods!(
    unsafe impl MTLComputePipelineReflection {
        #[cfg(feature = "MTLArgument")]
        #[method_id(@__retain_semantics Other bindings)]
        pub unsafe fn bindings(&self) -> Retained<NSArray<ProtocolObject<dyn MTLBinding>>>;

        #[cfg(feature = "MTLArgument")]
        #[deprecated]
        #[method_id(@__retain_semantics Other arguments)]
        pub fn arguments(&self) -> Retained<NSArray<MTLArgument>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MTLComputePipelineReflection {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLComputePipelineDescriptor;

    unsafe impl ClassType for MTLComputePipelineDescriptor {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSCopying for MTLComputePipelineDescriptor {}

unsafe impl NSObjectProtocol for MTLComputePipelineDescriptor {}

extern_methods!(
    unsafe impl MTLComputePipelineDescriptor {
        #[method_id(@__retain_semantics Other label)]
        pub fn label(&self) -> Option<Retained<NSString>>;

        #[method(setLabel:)]
        pub fn set_label(&self, label: Option<&NSString>);

        #[cfg(feature = "MTLLibrary")]
        #[method_id(@__retain_semantics Other computeFunction)]
        pub fn compute_function(&self) -> Option<Retained<ProtocolObject<dyn MTLFunction>>>;

        #[cfg(feature = "MTLLibrary")]
        #[method(setComputeFunction:)]
        pub fn set_compute_function(
            &self,
            compute_function: Option<&ProtocolObject<dyn MTLFunction>>,
        );

        #[method(threadGroupSizeIsMultipleOfThreadExecutionWidth)]
        pub fn thread_group_size_is_multiple_of_thread_execution_width(&self) -> bool;

        #[method(setThreadGroupSizeIsMultipleOfThreadExecutionWidth:)]
        pub unsafe fn set_thread_group_size_is_multiple_of_thread_execution_width(
            &self,
            thread_group_size_is_multiple_of_thread_execution_width: bool,
        );

        #[method(maxTotalThreadsPerThreadgroup)]
        pub fn max_total_threads_per_threadgroup(&self) -> NSUInteger;

        #[method(setMaxTotalThreadsPerThreadgroup:)]
        pub fn set_max_total_threads_per_threadgroup(
            &self,
            max_total_threads_per_threadgroup: NSUInteger,
        );

        #[cfg(feature = "MTLStageInputOutputDescriptor")]
        #[method_id(@__retain_semantics Other stageInputDescriptor)]
        pub fn stage_input_descriptor(&self) -> Option<Retained<MTLStageInputOutputDescriptor>>;

        #[cfg(feature = "MTLStageInputOutputDescriptor")]
        #[method(setStageInputDescriptor:)]
        pub fn set_stage_input_descriptor(
            &self,
            stage_input_descriptor: Option<&MTLStageInputOutputDescriptor>,
        );

        #[cfg(feature = "MTLPipeline")]
        #[method_id(@__retain_semantics Other buffers)]
        pub fn buffers(&self) -> Retained<MTLPipelineBufferDescriptorArray>;

        #[method(supportIndirectCommandBuffers)]
        pub fn support_indirect_command_buffers(&self) -> bool;

        #[method(setSupportIndirectCommandBuffers:)]
        pub fn set_support_indirect_command_buffers(&self, support_indirect_command_buffers: bool);

        #[cfg(feature = "MTLDynamicLibrary")]
        #[deprecated]
        #[method_id(@__retain_semantics Other insertLibraries)]
        pub fn insert_libraries(
            &self,
        ) -> Option<Retained<NSArray<ProtocolObject<dyn MTLDynamicLibrary>>>>;

        #[cfg(feature = "MTLDynamicLibrary")]
        #[deprecated]
        #[method(setInsertLibraries:)]
        pub fn set_insert_libraries(
            &self,
            insert_libraries: Option<&NSArray<ProtocolObject<dyn MTLDynamicLibrary>>>,
        );

        #[cfg(feature = "MTLDynamicLibrary")]
        #[method_id(@__retain_semantics Other preloadedLibraries)]
        pub fn preloaded_libraries(
            &self,
        ) -> Retained<NSArray<ProtocolObject<dyn MTLDynamicLibrary>>>;

        #[cfg(feature = "MTLDynamicLibrary")]
        #[method(setPreloadedLibraries:)]
        pub fn set_preloaded_libraries(
            &self,
            preloaded_libraries: &NSArray<ProtocolObject<dyn MTLDynamicLibrary>>,
        );

        #[cfg(feature = "MTLBinaryArchive")]
        #[method_id(@__retain_semantics Other binaryArchives)]
        pub fn binary_archives(
            &self,
        ) -> Option<Retained<NSArray<ProtocolObject<dyn MTLBinaryArchive>>>>;

        #[cfg(feature = "MTLBinaryArchive")]
        #[method(setBinaryArchives:)]
        pub fn set_binary_archives(
            &self,
            binary_archives: Option<&NSArray<ProtocolObject<dyn MTLBinaryArchive>>>,
        );

        #[method(reset)]
        pub fn reset(&self);

        #[cfg(feature = "MTLLinkedFunctions")]
        #[method_id(@__retain_semantics Other linkedFunctions)]
        pub fn linked_functions(&self) -> Option<Retained<MTLLinkedFunctions>>;

        #[cfg(feature = "MTLLinkedFunctions")]
        #[method(setLinkedFunctions:)]
        pub fn set_linked_functions(&self, linked_functions: Option<&MTLLinkedFunctions>);

        #[method(supportAddingBinaryFunctions)]
        pub fn support_adding_binary_functions(&self) -> bool;

        #[method(setSupportAddingBinaryFunctions:)]
        pub fn set_support_adding_binary_functions(&self, support_adding_binary_functions: bool);

        #[method(maxCallStackDepth)]
        pub fn max_call_stack_depth(&self) -> NSUInteger;

        #[method(setMaxCallStackDepth:)]
        pub fn set_max_call_stack_depth(&self, max_call_stack_depth: NSUInteger);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MTLComputePipelineDescriptor {
        #[method_id(@__retain_semantics Init init)]
        pub fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub fn new() -> Retained<Self>;
    }
);

impl DefaultRetained for MTLComputePipelineDescriptor {
    #[inline]
    fn default_id() -> Retained<Self> {
        Self::new()
    }
}

extern_protocol!(
    pub unsafe trait MTLComputePipelineState: NSObjectProtocol + IsRetainable {
        #[method_id(@__retain_semantics Other label)]
        fn label(&self) -> Option<Retained<NSString>>;

        #[cfg(feature = "MTLDevice")]
        #[method_id(@__retain_semantics Other device)]
        fn device(&self) -> Retained<ProtocolObject<dyn MTLDevice>>;

        #[method(maxTotalThreadsPerThreadgroup)]
        fn max_total_threads_per_threadgroup(&self) -> NSUInteger;

        #[method(threadExecutionWidth)]
        fn thread_execution_width(&self) -> NSUInteger;

        #[method(staticThreadgroupMemoryLength)]
        fn static_threadgroup_memory_length(&self) -> NSUInteger;

        #[cfg(feature = "MTLTypes")]
        #[method(imageblockMemoryLengthForDimensions:)]
        unsafe fn imageblock_memory_length_for_dimensions(
            &self,
            imageblock_dimensions: MTLSize,
        ) -> NSUInteger;

        #[method(supportIndirectCommandBuffers)]
        fn support_indirect_command_buffers(&self) -> bool;

        #[cfg(feature = "MTLTypes")]
        #[method(gpuResourceID)]
        unsafe fn gpu_resource_id(&self) -> MTLResourceID;

        #[cfg(all(feature = "MTLFunctionHandle", feature = "MTLLibrary"))]
        #[method_id(@__retain_semantics Other functionHandleWithFunction:)]
        fn function_handle_with_function(
            &self,
            function: &ProtocolObject<dyn MTLFunction>,
        ) -> Option<Retained<ProtocolObject<dyn MTLFunctionHandle>>>;

        #[cfg(feature = "MTLLibrary")]
        #[method_id(@__retain_semantics New newComputePipelineStateWithAdditionalBinaryFunctions:error:_)]
        fn new_compute_pipeline_state_with_additional_binary_functions_error(
            &self,
            functions: &NSArray<ProtocolObject<dyn MTLFunction>>,
        ) -> Result<Retained<ProtocolObject<dyn MTLComputePipelineState>>, Retained<NSError>>;

        #[cfg(all(feature = "MTLResource", feature = "MTLVisibleFunctionTable"))]
        #[method_id(@__retain_semantics New newVisibleFunctionTableWithDescriptor:)]
        fn new_visible_function_table_with_descriptor(
            &self,
            descriptor: &MTLVisibleFunctionTableDescriptor,
        ) -> Option<Retained<ProtocolObject<dyn MTLVisibleFunctionTable>>>;

        #[cfg(all(feature = "MTLIntersectionFunctionTable", feature = "MTLResource"))]
        #[method_id(@__retain_semantics New newIntersectionFunctionTableWithDescriptor:)]
        fn new_intersection_function_table_with_descriptor(
            &self,
            descriptor: &MTLIntersectionFunctionTableDescriptor,
        ) -> Option<Retained<ProtocolObject<dyn MTLIntersectionFunctionTable>>>;
    }

    unsafe impl ProtocolType for dyn MTLComputePipelineState {}
);
