//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;
use crate::Metal::*;

ns_options!(
    #[underlying(NSUInteger)]
    pub enum MTLBlitOption {
        MTLBlitOptionNone = 0,
        MTLBlitOptionDepthFromDepthStencil = 1 << 0,
        MTLBlitOptionStencilFromDepthStencil = 1 << 1,
        MTLBlitOptionRowLinearPVRTC = 1 << 2,
    }
);

extern_protocol!(
    pub struct MTLBlitCommandEncoder;

    unsafe impl ProtocolType for MTLBlitCommandEncoder {
        #[method(synchronizeResource:)]
        pub fn synchronizeResource(&self, resource: &MTLResource);

        #[method(synchronizeTexture:slice:level:)]
        pub unsafe fn synchronizeTexture_slice_level(
            &self,
            texture: &MTLTexture,
            slice: NSUInteger,
            level: NSUInteger,
        );

        #[method(copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:)]
        pub unsafe fn copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin(
            &self,
            source_texture: &MTLTexture,
            source_slice: NSUInteger,
            source_level: NSUInteger,
            source_origin: MTLOrigin,
            source_size: MTLSize,
            destination_texture: &MTLTexture,
            destination_slice: NSUInteger,
            destination_level: NSUInteger,
            destination_origin: MTLOrigin,
        );

        #[method(copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:)]
        pub unsafe fn copyFromBuffer_sourceOffset_sourceBytesPerRow_sourceBytesPerImage_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin(
            &self,
            source_buffer: &MTLBuffer,
            source_offset: NSUInteger,
            source_bytes_per_row: NSUInteger,
            source_bytes_per_image: NSUInteger,
            source_size: MTLSize,
            destination_texture: &MTLTexture,
            destination_slice: NSUInteger,
            destination_level: NSUInteger,
            destination_origin: MTLOrigin,
        );

        #[method(copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:options:)]
        pub unsafe fn copyFromBuffer_sourceOffset_sourceBytesPerRow_sourceBytesPerImage_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_options(
            &self,
            source_buffer: &MTLBuffer,
            source_offset: NSUInteger,
            source_bytes_per_row: NSUInteger,
            source_bytes_per_image: NSUInteger,
            source_size: MTLSize,
            destination_texture: &MTLTexture,
            destination_slice: NSUInteger,
            destination_level: NSUInteger,
            destination_origin: MTLOrigin,
            options: MTLBlitOption,
        );

        #[method(copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:)]
        pub unsafe fn copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toBuffer_destinationOffset_destinationBytesPerRow_destinationBytesPerImage(
            &self,
            source_texture: &MTLTexture,
            source_slice: NSUInteger,
            source_level: NSUInteger,
            source_origin: MTLOrigin,
            source_size: MTLSize,
            destination_buffer: &MTLBuffer,
            destination_offset: NSUInteger,
            destination_bytes_per_row: NSUInteger,
            destination_bytes_per_image: NSUInteger,
        );

        #[method(copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:options:)]
        pub unsafe fn copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toBuffer_destinationOffset_destinationBytesPerRow_destinationBytesPerImage_options(
            &self,
            source_texture: &MTLTexture,
            source_slice: NSUInteger,
            source_level: NSUInteger,
            source_origin: MTLOrigin,
            source_size: MTLSize,
            destination_buffer: &MTLBuffer,
            destination_offset: NSUInteger,
            destination_bytes_per_row: NSUInteger,
            destination_bytes_per_image: NSUInteger,
            options: MTLBlitOption,
        );

        #[method(generateMipmapsForTexture:)]
        pub fn generateMipmapsForTexture(&self, texture: &MTLTexture);

        #[method(fillBuffer:range:value:)]
        pub fn fillBuffer_range_value(&self, buffer: &MTLBuffer, range: NSRange, value: u8);

        #[method(copyFromTexture:sourceSlice:sourceLevel:toTexture:destinationSlice:destinationLevel:sliceCount:levelCount:)]
        pub unsafe fn copyFromTexture_sourceSlice_sourceLevel_toTexture_destinationSlice_destinationLevel_sliceCount_levelCount(
            &self,
            source_texture: &MTLTexture,
            source_slice: NSUInteger,
            source_level: NSUInteger,
            destination_texture: &MTLTexture,
            destination_slice: NSUInteger,
            destination_level: NSUInteger,
            slice_count: NSUInteger,
            level_count: NSUInteger,
        );

        #[method(copyFromTexture:toTexture:)]
        pub unsafe fn copyFromTexture_toTexture(
            &self,
            source_texture: &MTLTexture,
            destination_texture: &MTLTexture,
        );

        #[method(copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:)]
        pub unsafe fn copyFromBuffer_sourceOffset_toBuffer_destinationOffset_size(
            &self,
            source_buffer: &MTLBuffer,
            source_offset: NSUInteger,
            destination_buffer: &MTLBuffer,
            destination_offset: NSUInteger,
            size: NSUInteger,
        );

        #[method(updateFence:)]
        pub fn updateFence(&self, fence: &MTLFence);

        #[method(waitForFence:)]
        pub fn waitForFence(&self, fence: &MTLFence);

        #[optional]
        #[method(getTextureAccessCounters:region:mipLevel:slice:resetCounters:countersBuffer:countersBufferOffset:)]
        pub unsafe fn getTextureAccessCounters_region_mipLevel_slice_resetCounters_countersBuffer_countersBufferOffset(
            &self,
            texture: &MTLTexture,
            region: MTLRegion,
            mip_level: NSUInteger,
            slice: NSUInteger,
            reset_counters: bool,
            counters_buffer: &MTLBuffer,
            counters_buffer_offset: NSUInteger,
        );

        #[optional]
        #[method(resetTextureAccessCounters:region:mipLevel:slice:)]
        pub unsafe fn resetTextureAccessCounters_region_mipLevel_slice(
            &self,
            texture: &MTLTexture,
            region: MTLRegion,
            mip_level: NSUInteger,
            slice: NSUInteger,
        );

        #[method(optimizeContentsForGPUAccess:)]
        pub fn optimizeContentsForGPUAccess(&self, texture: &MTLTexture);

        #[method(optimizeContentsForGPUAccess:slice:level:)]
        pub unsafe fn optimizeContentsForGPUAccess_slice_level(
            &self,
            texture: &MTLTexture,
            slice: NSUInteger,
            level: NSUInteger,
        );

        #[method(optimizeContentsForCPUAccess:)]
        pub unsafe fn optimizeContentsForCPUAccess(&self, texture: &MTLTexture);

        #[method(optimizeContentsForCPUAccess:slice:level:)]
        pub unsafe fn optimizeContentsForCPUAccess_slice_level(
            &self,
            texture: &MTLTexture,
            slice: NSUInteger,
            level: NSUInteger,
        );

        #[method(resetCommandsInBuffer:withRange:)]
        pub unsafe fn resetCommandsInBuffer_withRange(
            &self,
            buffer: &MTLIndirectCommandBuffer,
            range: NSRange,
        );

        #[method(copyIndirectCommandBuffer:sourceRange:destination:destinationIndex:)]
        pub unsafe fn copyIndirectCommandBuffer_sourceRange_destination_destinationIndex(
            &self,
            source: &MTLIndirectCommandBuffer,
            source_range: NSRange,
            destination: &MTLIndirectCommandBuffer,
            destination_index: NSUInteger,
        );

        #[method(optimizeIndirectCommandBuffer:withRange:)]
        pub unsafe fn optimizeIndirectCommandBuffer_withRange(
            &self,
            indirect_command_buffer: &MTLIndirectCommandBuffer,
            range: NSRange,
        );

        #[method(sampleCountersInBuffer:atSampleIndex:withBarrier:)]
        pub unsafe fn sampleCountersInBuffer_atSampleIndex_withBarrier(
            &self,
            sample_buffer: &MTLCounterSampleBuffer,
            sample_index: NSUInteger,
            barrier: bool,
        );

        #[method(resolveCounters:inRange:destinationBuffer:destinationOffset:)]
        pub unsafe fn resolveCounters_inRange_destinationBuffer_destinationOffset(
            &self,
            sample_buffer: &MTLCounterSampleBuffer,
            range: NSRange,
            destination_buffer: &MTLBuffer,
            destination_offset: NSUInteger,
        );
    }
);
