//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MTLBlendFactor(pub NSUInteger);
impl MTLBlendFactor {
    #[doc(alias = "MTLBlendFactorZero")]
    pub const Zero: Self = Self(0);
    #[doc(alias = "MTLBlendFactorOne")]
    pub const One: Self = Self(1);
    #[doc(alias = "MTLBlendFactorSourceColor")]
    pub const SourceColor: Self = Self(2);
    #[doc(alias = "MTLBlendFactorOneMinusSourceColor")]
    pub const OneMinusSourceColor: Self = Self(3);
    #[doc(alias = "MTLBlendFactorSourceAlpha")]
    pub const SourceAlpha: Self = Self(4);
    #[doc(alias = "MTLBlendFactorOneMinusSourceAlpha")]
    pub const OneMinusSourceAlpha: Self = Self(5);
    #[doc(alias = "MTLBlendFactorDestinationColor")]
    pub const DestinationColor: Self = Self(6);
    #[doc(alias = "MTLBlendFactorOneMinusDestinationColor")]
    pub const OneMinusDestinationColor: Self = Self(7);
    #[doc(alias = "MTLBlendFactorDestinationAlpha")]
    pub const DestinationAlpha: Self = Self(8);
    #[doc(alias = "MTLBlendFactorOneMinusDestinationAlpha")]
    pub const OneMinusDestinationAlpha: Self = Self(9);
    #[doc(alias = "MTLBlendFactorSourceAlphaSaturated")]
    pub const SourceAlphaSaturated: Self = Self(10);
    #[doc(alias = "MTLBlendFactorBlendColor")]
    pub const BlendColor: Self = Self(11);
    #[doc(alias = "MTLBlendFactorOneMinusBlendColor")]
    pub const OneMinusBlendColor: Self = Self(12);
    #[doc(alias = "MTLBlendFactorBlendAlpha")]
    pub const BlendAlpha: Self = Self(13);
    #[doc(alias = "MTLBlendFactorOneMinusBlendAlpha")]
    pub const OneMinusBlendAlpha: Self = Self(14);
    #[doc(alias = "MTLBlendFactorSource1Color")]
    pub const Source1Color: Self = Self(15);
    #[doc(alias = "MTLBlendFactorOneMinusSource1Color")]
    pub const OneMinusSource1Color: Self = Self(16);
    #[doc(alias = "MTLBlendFactorSource1Alpha")]
    pub const Source1Alpha: Self = Self(17);
    #[doc(alias = "MTLBlendFactorOneMinusSource1Alpha")]
    pub const OneMinusSource1Alpha: Self = Self(18);
}

unsafe impl Encode for MTLBlendFactor {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for MTLBlendFactor {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MTLBlendOperation(pub NSUInteger);
impl MTLBlendOperation {
    #[doc(alias = "MTLBlendOperationAdd")]
    pub const Add: Self = Self(0);
    #[doc(alias = "MTLBlendOperationSubtract")]
    pub const Subtract: Self = Self(1);
    #[doc(alias = "MTLBlendOperationReverseSubtract")]
    pub const ReverseSubtract: Self = Self(2);
    #[doc(alias = "MTLBlendOperationMin")]
    pub const Min: Self = Self(3);
    #[doc(alias = "MTLBlendOperationMax")]
    pub const Max: Self = Self(4);
}

unsafe impl Encode for MTLBlendOperation {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for MTLBlendOperation {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MTLColorWriteMask(pub NSUInteger);
bitflags::bitflags! {
    impl MTLColorWriteMask: NSUInteger {
        #[doc(alias = "MTLColorWriteMaskNone")]
        const None = 0;
        #[doc(alias = "MTLColorWriteMaskRed")]
        const Red = 0x1<<3;
        #[doc(alias = "MTLColorWriteMaskGreen")]
        const Green = 0x1<<2;
        #[doc(alias = "MTLColorWriteMaskBlue")]
        const Blue = 0x1<<1;
        #[doc(alias = "MTLColorWriteMaskAlpha")]
        const Alpha = 0x1<<0;
        #[doc(alias = "MTLColorWriteMaskAll")]
        const All = 0xf;
    }
}

unsafe impl Encode for MTLColorWriteMask {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for MTLColorWriteMask {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MTLPrimitiveTopologyClass(pub NSUInteger);
impl MTLPrimitiveTopologyClass {
    #[doc(alias = "MTLPrimitiveTopologyClassUnspecified")]
    pub const Unspecified: Self = Self(0);
    #[doc(alias = "MTLPrimitiveTopologyClassPoint")]
    pub const Point: Self = Self(1);
    #[doc(alias = "MTLPrimitiveTopologyClassLine")]
    pub const Line: Self = Self(2);
    #[doc(alias = "MTLPrimitiveTopologyClassTriangle")]
    pub const Triangle: Self = Self(3);
}

unsafe impl Encode for MTLPrimitiveTopologyClass {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for MTLPrimitiveTopologyClass {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MTLTessellationPartitionMode(pub NSUInteger);
impl MTLTessellationPartitionMode {
    #[doc(alias = "MTLTessellationPartitionModePow2")]
    pub const Pow2: Self = Self(0);
    #[doc(alias = "MTLTessellationPartitionModeInteger")]
    pub const Integer: Self = Self(1);
    #[doc(alias = "MTLTessellationPartitionModeFractionalOdd")]
    pub const FractionalOdd: Self = Self(2);
    #[doc(alias = "MTLTessellationPartitionModeFractionalEven")]
    pub const FractionalEven: Self = Self(3);
}

unsafe impl Encode for MTLTessellationPartitionMode {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for MTLTessellationPartitionMode {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MTLTessellationFactorStepFunction(pub NSUInteger);
impl MTLTessellationFactorStepFunction {
    #[doc(alias = "MTLTessellationFactorStepFunctionConstant")]
    pub const Constant: Self = Self(0);
    #[doc(alias = "MTLTessellationFactorStepFunctionPerPatch")]
    pub const PerPatch: Self = Self(1);
    #[doc(alias = "MTLTessellationFactorStepFunctionPerInstance")]
    pub const PerInstance: Self = Self(2);
    #[doc(alias = "MTLTessellationFactorStepFunctionPerPatchAndPerInstance")]
    pub const PerPatchAndPerInstance: Self = Self(3);
}

unsafe impl Encode for MTLTessellationFactorStepFunction {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for MTLTessellationFactorStepFunction {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MTLTessellationFactorFormat(pub NSUInteger);
impl MTLTessellationFactorFormat {
    #[doc(alias = "MTLTessellationFactorFormatHalf")]
    pub const Half: Self = Self(0);
}

unsafe impl Encode for MTLTessellationFactorFormat {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for MTLTessellationFactorFormat {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct MTLTessellationControlPointIndexType(pub NSUInteger);
impl MTLTessellationControlPointIndexType {
    #[doc(alias = "MTLTessellationControlPointIndexTypeNone")]
    pub const None: Self = Self(0);
    #[doc(alias = "MTLTessellationControlPointIndexTypeUInt16")]
    pub const UInt16: Self = Self(1);
    #[doc(alias = "MTLTessellationControlPointIndexTypeUInt32")]
    pub const UInt32: Self = Self(2);
}

unsafe impl Encode for MTLTessellationControlPointIndexType {
    const ENCODING: Encoding = NSUInteger::ENCODING;
}

unsafe impl RefEncode for MTLTessellationControlPointIndexType {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLRenderPipelineColorAttachmentDescriptor;

    unsafe impl ClassType for MTLRenderPipelineColorAttachmentDescriptor {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSCopying for MTLRenderPipelineColorAttachmentDescriptor {}

unsafe impl NSObjectProtocol for MTLRenderPipelineColorAttachmentDescriptor {}

extern_methods!(
    unsafe impl MTLRenderPipelineColorAttachmentDescriptor {
        #[cfg(feature = "MTLPixelFormat")]
        #[method(pixelFormat)]
        pub fn pixel_format(&self) -> MTLPixelFormat;

        #[cfg(feature = "MTLPixelFormat")]
        #[method(setPixelFormat:)]
        pub fn set_pixel_format(&self, pixel_format: MTLPixelFormat);

        #[method(isBlendingEnabled)]
        pub fn is_blending_enabled(&self) -> bool;

        #[method(setBlendingEnabled:)]
        pub fn set_blending_enabled(&self, blending_enabled: bool);

        #[method(sourceRGBBlendFactor)]
        pub fn source_rgb_blend_factor(&self) -> MTLBlendFactor;

        #[method(setSourceRGBBlendFactor:)]
        pub fn set_source_rgb_blend_factor(&self, source_rgb_blend_factor: MTLBlendFactor);

        #[method(destinationRGBBlendFactor)]
        pub fn destination_rgb_blend_factor(&self) -> MTLBlendFactor;

        #[method(setDestinationRGBBlendFactor:)]
        pub fn set_destination_rgb_blend_factor(
            &self,
            destination_rgb_blend_factor: MTLBlendFactor,
        );

        #[method(rgbBlendOperation)]
        pub fn rgb_blend_operation(&self) -> MTLBlendOperation;

        #[method(setRgbBlendOperation:)]
        pub fn set_rgb_blend_operation(&self, rgb_blend_operation: MTLBlendOperation);

        #[method(sourceAlphaBlendFactor)]
        pub fn source_alpha_blend_factor(&self) -> MTLBlendFactor;

        #[method(setSourceAlphaBlendFactor:)]
        pub fn set_source_alpha_blend_factor(&self, source_alpha_blend_factor: MTLBlendFactor);

        #[method(destinationAlphaBlendFactor)]
        pub fn destination_alpha_blend_factor(&self) -> MTLBlendFactor;

        #[method(setDestinationAlphaBlendFactor:)]
        pub fn set_destination_alpha_blend_factor(
            &self,
            destination_alpha_blend_factor: MTLBlendFactor,
        );

        #[method(alphaBlendOperation)]
        pub fn alpha_blend_operation(&self) -> MTLBlendOperation;

        #[method(setAlphaBlendOperation:)]
        pub fn set_alpha_blend_operation(&self, alpha_blend_operation: MTLBlendOperation);

        #[method(writeMask)]
        pub fn write_mask(&self) -> MTLColorWriteMask;

        #[method(setWriteMask:)]
        pub fn set_write_mask(&self, write_mask: MTLColorWriteMask);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MTLRenderPipelineColorAttachmentDescriptor {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLRenderPipelineReflection;

    unsafe impl ClassType for MTLRenderPipelineReflection {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSObjectProtocol for MTLRenderPipelineReflection {}

extern_methods!(
    unsafe impl MTLRenderPipelineReflection {
        #[cfg(feature = "MTLArgument")]
        #[method_id(@__retain_semantics Other vertexBindings)]
        pub unsafe fn vertex_bindings(&self) -> Retained<NSArray<ProtocolObject<dyn MTLBinding>>>;

        #[cfg(feature = "MTLArgument")]
        #[method_id(@__retain_semantics Other fragmentBindings)]
        pub unsafe fn fragment_bindings(&self)
            -> Retained<NSArray<ProtocolObject<dyn MTLBinding>>>;

        #[cfg(feature = "MTLArgument")]
        #[method_id(@__retain_semantics Other tileBindings)]
        pub unsafe fn tile_bindings(&self) -> Retained<NSArray<ProtocolObject<dyn MTLBinding>>>;

        #[cfg(feature = "MTLArgument")]
        #[method_id(@__retain_semantics Other objectBindings)]
        pub unsafe fn object_bindings(&self) -> Retained<NSArray<ProtocolObject<dyn MTLBinding>>>;

        #[cfg(feature = "MTLArgument")]
        #[method_id(@__retain_semantics Other meshBindings)]
        pub unsafe fn mesh_bindings(&self) -> Retained<NSArray<ProtocolObject<dyn MTLBinding>>>;

        #[cfg(feature = "MTLArgument")]
        #[deprecated]
        #[method_id(@__retain_semantics Other vertexArguments)]
        pub fn vertex_arguments(&self) -> Option<Retained<NSArray<MTLArgument>>>;

        #[cfg(feature = "MTLArgument")]
        #[deprecated]
        #[method_id(@__retain_semantics Other fragmentArguments)]
        pub fn fragment_arguments(&self) -> Option<Retained<NSArray<MTLArgument>>>;

        #[cfg(feature = "MTLArgument")]
        #[deprecated]
        #[method_id(@__retain_semantics Other tileArguments)]
        pub fn tile_arguments(&self) -> Option<Retained<NSArray<MTLArgument>>>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MTLRenderPipelineReflection {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLRenderPipelineDescriptor;

    unsafe impl ClassType for MTLRenderPipelineDescriptor {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSCopying for MTLRenderPipelineDescriptor {}

unsafe impl NSObjectProtocol for MTLRenderPipelineDescriptor {}

extern_methods!(
    unsafe impl MTLRenderPipelineDescriptor {
        #[method_id(@__retain_semantics Other label)]
        pub fn label(&self) -> Option<Retained<NSString>>;

        #[method(setLabel:)]
        pub fn set_label(&self, label: Option<&NSString>);

        #[cfg(feature = "MTLLibrary")]
        #[method_id(@__retain_semantics Other vertexFunction)]
        pub fn vertex_function(&self) -> Option<Retained<ProtocolObject<dyn MTLFunction>>>;

        #[cfg(feature = "MTLLibrary")]
        #[method(setVertexFunction:)]
        pub fn set_vertex_function(
            &self,
            vertex_function: Option<&ProtocolObject<dyn MTLFunction>>,
        );

        #[cfg(feature = "MTLLibrary")]
        #[method_id(@__retain_semantics Other fragmentFunction)]
        pub fn fragment_function(&self) -> Option<Retained<ProtocolObject<dyn MTLFunction>>>;

        #[cfg(feature = "MTLLibrary")]
        #[method(setFragmentFunction:)]
        pub fn set_fragment_function(
            &self,
            fragment_function: Option<&ProtocolObject<dyn MTLFunction>>,
        );

        #[cfg(feature = "MTLVertexDescriptor")]
        #[method_id(@__retain_semantics Other vertexDescriptor)]
        pub fn vertex_descriptor(&self) -> Option<Retained<MTLVertexDescriptor>>;

        #[cfg(feature = "MTLVertexDescriptor")]
        #[method(setVertexDescriptor:)]
        pub fn set_vertex_descriptor(&self, vertex_descriptor: Option<&MTLVertexDescriptor>);

        #[deprecated]
        #[method(sampleCount)]
        pub fn sample_count(&self) -> NSUInteger;

        #[deprecated]
        #[method(setSampleCount:)]
        pub fn set_sample_count(&self, sample_count: NSUInteger);

        #[method(rasterSampleCount)]
        pub fn raster_sample_count(&self) -> NSUInteger;

        #[method(setRasterSampleCount:)]
        pub fn set_raster_sample_count(&self, raster_sample_count: NSUInteger);

        #[method(isAlphaToCoverageEnabled)]
        pub fn is_alpha_to_coverage_enabled(&self) -> bool;

        #[method(setAlphaToCoverageEnabled:)]
        pub fn set_alpha_to_coverage_enabled(&self, alpha_to_coverage_enabled: bool);

        #[method(isAlphaToOneEnabled)]
        pub fn is_alpha_to_one_enabled(&self) -> bool;

        #[method(setAlphaToOneEnabled:)]
        pub fn set_alpha_to_one_enabled(&self, alpha_to_one_enabled: bool);

        #[method(isRasterizationEnabled)]
        pub fn is_rasterization_enabled(&self) -> bool;

        #[method(setRasterizationEnabled:)]
        pub fn set_rasterization_enabled(&self, rasterization_enabled: bool);

        #[method(maxVertexAmplificationCount)]
        pub fn max_vertex_amplification_count(&self) -> NSUInteger;

        #[method(setMaxVertexAmplificationCount:)]
        pub unsafe fn set_max_vertex_amplification_count(
            &self,
            max_vertex_amplification_count: NSUInteger,
        );

        #[method_id(@__retain_semantics Other colorAttachments)]
        pub fn color_attachments(
            &self,
        ) -> Retained<MTLRenderPipelineColorAttachmentDescriptorArray>;

        #[cfg(feature = "MTLPixelFormat")]
        #[method(depthAttachmentPixelFormat)]
        pub fn depth_attachment_pixel_format(&self) -> MTLPixelFormat;

        #[cfg(feature = "MTLPixelFormat")]
        #[method(setDepthAttachmentPixelFormat:)]
        pub fn set_depth_attachment_pixel_format(
            &self,
            depth_attachment_pixel_format: MTLPixelFormat,
        );

        #[cfg(feature = "MTLPixelFormat")]
        #[method(stencilAttachmentPixelFormat)]
        pub fn stencil_attachment_pixel_format(&self) -> MTLPixelFormat;

        #[cfg(feature = "MTLPixelFormat")]
        #[method(setStencilAttachmentPixelFormat:)]
        pub fn set_stencil_attachment_pixel_format(
            &self,
            stencil_attachment_pixel_format: MTLPixelFormat,
        );

        #[method(inputPrimitiveTopology)]
        pub fn input_primitive_topology(&self) -> MTLPrimitiveTopologyClass;

        #[method(setInputPrimitiveTopology:)]
        pub unsafe fn set_input_primitive_topology(
            &self,
            input_primitive_topology: MTLPrimitiveTopologyClass,
        );

        #[method(tessellationPartitionMode)]
        pub fn tessellation_partition_mode(&self) -> MTLTessellationPartitionMode;

        #[method(setTessellationPartitionMode:)]
        pub unsafe fn set_tessellation_partition_mode(
            &self,
            tessellation_partition_mode: MTLTessellationPartitionMode,
        );

        #[method(maxTessellationFactor)]
        pub fn max_tessellation_factor(&self) -> NSUInteger;

        #[method(setMaxTessellationFactor:)]
        pub unsafe fn set_max_tessellation_factor(&self, max_tessellation_factor: NSUInteger);

        #[method(isTessellationFactorScaleEnabled)]
        pub fn is_tessellation_factor_scale_enabled(&self) -> bool;

        #[method(setTessellationFactorScaleEnabled:)]
        pub fn set_tessellation_factor_scale_enabled(
            &self,
            tessellation_factor_scale_enabled: bool,
        );

        #[method(tessellationFactorFormat)]
        pub fn tessellation_factor_format(&self) -> MTLTessellationFactorFormat;

        #[method(setTessellationFactorFormat:)]
        pub fn set_tessellation_factor_format(
            &self,
            tessellation_factor_format: MTLTessellationFactorFormat,
        );

        #[method(tessellationControlPointIndexType)]
        pub fn tessellation_control_point_index_type(&self)
            -> MTLTessellationControlPointIndexType;

        #[method(setTessellationControlPointIndexType:)]
        pub unsafe fn set_tessellation_control_point_index_type(
            &self,
            tessellation_control_point_index_type: MTLTessellationControlPointIndexType,
        );

        #[method(tessellationFactorStepFunction)]
        pub fn tessellation_factor_step_function(&self) -> MTLTessellationFactorStepFunction;

        #[method(setTessellationFactorStepFunction:)]
        pub fn set_tessellation_factor_step_function(
            &self,
            tessellation_factor_step_function: MTLTessellationFactorStepFunction,
        );

        #[cfg(feature = "MTLRenderCommandEncoder")]
        #[method(tessellationOutputWindingOrder)]
        pub fn tessellation_output_winding_order(&self) -> MTLWinding;

        #[cfg(feature = "MTLRenderCommandEncoder")]
        #[method(setTessellationOutputWindingOrder:)]
        pub fn set_tessellation_output_winding_order(
            &self,
            tessellation_output_winding_order: MTLWinding,
        );

        #[cfg(feature = "MTLPipeline")]
        #[method_id(@__retain_semantics Other vertexBuffers)]
        pub fn vertex_buffers(&self) -> Retained<MTLPipelineBufferDescriptorArray>;

        #[cfg(feature = "MTLPipeline")]
        #[method_id(@__retain_semantics Other fragmentBuffers)]
        pub fn fragment_buffers(&self) -> Retained<MTLPipelineBufferDescriptorArray>;

        #[method(supportIndirectCommandBuffers)]
        pub fn support_indirect_command_buffers(&self) -> bool;

        #[method(setSupportIndirectCommandBuffers:)]
        pub fn set_support_indirect_command_buffers(&self, support_indirect_command_buffers: bool);

        #[cfg(feature = "MTLBinaryArchive")]
        #[method_id(@__retain_semantics Other binaryArchives)]
        pub fn binary_archives(
            &self,
        ) -> Option<Retained<NSArray<ProtocolObject<dyn MTLBinaryArchive>>>>;

        #[cfg(feature = "MTLBinaryArchive")]
        #[method(setBinaryArchives:)]
        pub fn set_binary_archives(
            &self,
            binary_archives: Option<&NSArray<ProtocolObject<dyn MTLBinaryArchive>>>,
        );

        #[cfg(feature = "MTLDynamicLibrary")]
        #[method_id(@__retain_semantics Other vertexPreloadedLibraries)]
        pub fn vertex_preloaded_libraries(
            &self,
        ) -> Retained<NSArray<ProtocolObject<dyn MTLDynamicLibrary>>>;

        #[cfg(feature = "MTLDynamicLibrary")]
        #[method(setVertexPreloadedLibraries:)]
        pub fn set_vertex_preloaded_libraries(
            &self,
            vertex_preloaded_libraries: &NSArray<ProtocolObject<dyn MTLDynamicLibrary>>,
        );

        #[cfg(feature = "MTLDynamicLibrary")]
        #[method_id(@__retain_semantics Other fragmentPreloadedLibraries)]
        pub fn fragment_preloaded_libraries(
            &self,
        ) -> Retained<NSArray<ProtocolObject<dyn MTLDynamicLibrary>>>;

        #[cfg(feature = "MTLDynamicLibrary")]
        #[method(setFragmentPreloadedLibraries:)]
        pub fn set_fragment_preloaded_libraries(
            &self,
            fragment_preloaded_libraries: &NSArray<ProtocolObject<dyn MTLDynamicLibrary>>,
        );

        #[cfg(feature = "MTLLinkedFunctions")]
        #[method_id(@__retain_semantics Other vertexLinkedFunctions)]
        pub fn vertex_linked_functions(&self) -> Retained<MTLLinkedFunctions>;

        #[cfg(feature = "MTLLinkedFunctions")]
        #[method(setVertexLinkedFunctions:)]
        pub fn set_vertex_linked_functions(
            &self,
            vertex_linked_functions: Option<&MTLLinkedFunctions>,
        );

        #[cfg(feature = "MTLLinkedFunctions")]
        #[method_id(@__retain_semantics Other fragmentLinkedFunctions)]
        pub fn fragment_linked_functions(&self) -> Retained<MTLLinkedFunctions>;

        #[cfg(feature = "MTLLinkedFunctions")]
        #[method(setFragmentLinkedFunctions:)]
        pub fn set_fragment_linked_functions(
            &self,
            fragment_linked_functions: Option<&MTLLinkedFunctions>,
        );

        #[method(supportAddingVertexBinaryFunctions)]
        pub fn support_adding_vertex_binary_functions(&self) -> bool;

        #[method(setSupportAddingVertexBinaryFunctions:)]
        pub fn set_support_adding_vertex_binary_functions(
            &self,
            support_adding_vertex_binary_functions: bool,
        );

        #[method(supportAddingFragmentBinaryFunctions)]
        pub fn support_adding_fragment_binary_functions(&self) -> bool;

        #[method(setSupportAddingFragmentBinaryFunctions:)]
        pub fn set_support_adding_fragment_binary_functions(
            &self,
            support_adding_fragment_binary_functions: bool,
        );

        #[method(maxVertexCallStackDepth)]
        pub fn max_vertex_call_stack_depth(&self) -> NSUInteger;

        #[method(setMaxVertexCallStackDepth:)]
        pub fn set_max_vertex_call_stack_depth(&self, max_vertex_call_stack_depth: NSUInteger);

        #[method(maxFragmentCallStackDepth)]
        pub fn max_fragment_call_stack_depth(&self) -> NSUInteger;

        #[method(setMaxFragmentCallStackDepth:)]
        pub fn set_max_fragment_call_stack_depth(&self, max_fragment_call_stack_depth: NSUInteger);

        #[method(reset)]
        pub fn reset(&self);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MTLRenderPipelineDescriptor {
        #[method_id(@__retain_semantics Init init)]
        pub fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub fn new() -> Retained<Self>;
    }
);

impl DefaultRetained for MTLRenderPipelineDescriptor {
    #[inline]
    fn default_id() -> Retained<Self> {
        Self::new()
    }
}

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLRenderPipelineFunctionsDescriptor;

    unsafe impl ClassType for MTLRenderPipelineFunctionsDescriptor {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSCopying for MTLRenderPipelineFunctionsDescriptor {}

unsafe impl NSObjectProtocol for MTLRenderPipelineFunctionsDescriptor {}

extern_methods!(
    unsafe impl MTLRenderPipelineFunctionsDescriptor {
        #[cfg(feature = "MTLLibrary")]
        #[method_id(@__retain_semantics Other vertexAdditionalBinaryFunctions)]
        pub unsafe fn vertex_additional_binary_functions(
            &self,
        ) -> Option<Retained<NSArray<ProtocolObject<dyn MTLFunction>>>>;

        #[cfg(feature = "MTLLibrary")]
        #[method(setVertexAdditionalBinaryFunctions:)]
        pub unsafe fn set_vertex_additional_binary_functions(
            &self,
            vertex_additional_binary_functions: Option<&NSArray<ProtocolObject<dyn MTLFunction>>>,
        );

        #[cfg(feature = "MTLLibrary")]
        #[method_id(@__retain_semantics Other fragmentAdditionalBinaryFunctions)]
        pub unsafe fn fragment_additional_binary_functions(
            &self,
        ) -> Option<Retained<NSArray<ProtocolObject<dyn MTLFunction>>>>;

        #[cfg(feature = "MTLLibrary")]
        #[method(setFragmentAdditionalBinaryFunctions:)]
        pub unsafe fn set_fragment_additional_binary_functions(
            &self,
            fragment_additional_binary_functions: Option<&NSArray<ProtocolObject<dyn MTLFunction>>>,
        );

        #[cfg(feature = "MTLLibrary")]
        #[method_id(@__retain_semantics Other tileAdditionalBinaryFunctions)]
        pub unsafe fn tile_additional_binary_functions(
            &self,
        ) -> Option<Retained<NSArray<ProtocolObject<dyn MTLFunction>>>>;

        #[cfg(feature = "MTLLibrary")]
        #[method(setTileAdditionalBinaryFunctions:)]
        pub unsafe fn set_tile_additional_binary_functions(
            &self,
            tile_additional_binary_functions: Option<&NSArray<ProtocolObject<dyn MTLFunction>>>,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MTLRenderPipelineFunctionsDescriptor {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_protocol!(
    pub unsafe trait MTLRenderPipelineState: NSObjectProtocol + IsRetainable {
        #[method_id(@__retain_semantics Other label)]
        unsafe fn label(&self) -> Option<Retained<NSString>>;

        #[cfg(feature = "MTLDevice")]
        #[method_id(@__retain_semantics Other device)]
        unsafe fn device(&self) -> Retained<ProtocolObject<dyn MTLDevice>>;

        #[method(maxTotalThreadsPerThreadgroup)]
        unsafe fn max_total_threads_per_threadgroup(&self) -> NSUInteger;

        #[method(threadgroupSizeMatchesTileSize)]
        unsafe fn threadgroup_size_matches_tile_size(&self) -> bool;

        #[method(imageblockSampleLength)]
        unsafe fn imageblock_sample_length(&self) -> NSUInteger;

        #[cfg(feature = "MTLTypes")]
        #[method(imageblockMemoryLengthForDimensions:)]
        unsafe fn imageblock_memory_length_for_dimensions(
            &self,
            imageblock_dimensions: MTLSize,
        ) -> NSUInteger;

        #[method(supportIndirectCommandBuffers)]
        unsafe fn support_indirect_command_buffers(&self) -> bool;

        #[method(maxTotalThreadsPerObjectThreadgroup)]
        unsafe fn max_total_threads_per_object_threadgroup(&self) -> NSUInteger;

        #[method(maxTotalThreadsPerMeshThreadgroup)]
        unsafe fn max_total_threads_per_mesh_threadgroup(&self) -> NSUInteger;

        #[method(objectThreadExecutionWidth)]
        unsafe fn object_thread_execution_width(&self) -> NSUInteger;

        #[method(meshThreadExecutionWidth)]
        unsafe fn mesh_thread_execution_width(&self) -> NSUInteger;

        #[method(maxTotalThreadgroupsPerMeshGrid)]
        unsafe fn max_total_threadgroups_per_mesh_grid(&self) -> NSUInteger;

        #[cfg(feature = "MTLTypes")]
        #[method(gpuResourceID)]
        unsafe fn gpu_resource_id(&self) -> MTLResourceID;

        #[cfg(all(
            feature = "MTLFunctionHandle",
            feature = "MTLLibrary",
            feature = "MTLRenderCommandEncoder"
        ))]
        #[method_id(@__retain_semantics Other functionHandleWithFunction:stage:)]
        unsafe fn function_handle_with_function_stage(
            &self,
            function: &ProtocolObject<dyn MTLFunction>,
            stage: MTLRenderStages,
        ) -> Option<Retained<ProtocolObject<dyn MTLFunctionHandle>>>;

        #[cfg(all(
            feature = "MTLRenderCommandEncoder",
            feature = "MTLResource",
            feature = "MTLVisibleFunctionTable"
        ))]
        #[method_id(@__retain_semantics New newVisibleFunctionTableWithDescriptor:stage:)]
        unsafe fn new_visible_function_table_with_descriptor_stage(
            &self,
            descriptor: &MTLVisibleFunctionTableDescriptor,
            stage: MTLRenderStages,
        ) -> Option<Retained<ProtocolObject<dyn MTLVisibleFunctionTable>>>;

        #[cfg(all(
            feature = "MTLIntersectionFunctionTable",
            feature = "MTLRenderCommandEncoder",
            feature = "MTLResource"
        ))]
        #[method_id(@__retain_semantics New newIntersectionFunctionTableWithDescriptor:stage:)]
        unsafe fn new_intersection_function_table_with_descriptor_stage(
            &self,
            descriptor: &MTLIntersectionFunctionTableDescriptor,
            stage: MTLRenderStages,
        ) -> Option<Retained<ProtocolObject<dyn MTLIntersectionFunctionTable>>>;

        #[method_id(@__retain_semantics New newRenderPipelineStateWithAdditionalBinaryFunctions:error:_)]
        unsafe fn new_render_pipeline_state_with_additional_binary_functions_error(
            &self,
            additional_binary_functions: &MTLRenderPipelineFunctionsDescriptor,
        ) -> Result<Retained<ProtocolObject<dyn MTLRenderPipelineState>>, Retained<NSError>>;
    }

    unsafe impl ProtocolType for dyn MTLRenderPipelineState {}
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLRenderPipelineColorAttachmentDescriptorArray;

    unsafe impl ClassType for MTLRenderPipelineColorAttachmentDescriptorArray {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSObjectProtocol for MTLRenderPipelineColorAttachmentDescriptorArray {}

extern_methods!(
    unsafe impl MTLRenderPipelineColorAttachmentDescriptorArray {
        #[method_id(@__retain_semantics Other objectAtIndexedSubscript:)]
        pub unsafe fn object_at_indexed_subscript(
            &self,
            attachment_index: NSUInteger,
        ) -> Retained<MTLRenderPipelineColorAttachmentDescriptor>;

        #[method(setObject:atIndexedSubscript:)]
        pub unsafe fn set_object_at_indexed_subscript(
            &self,
            attachment: Option<&MTLRenderPipelineColorAttachmentDescriptor>,
            attachment_index: NSUInteger,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MTLRenderPipelineColorAttachmentDescriptorArray {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLTileRenderPipelineColorAttachmentDescriptor;

    unsafe impl ClassType for MTLTileRenderPipelineColorAttachmentDescriptor {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSCopying for MTLTileRenderPipelineColorAttachmentDescriptor {}

unsafe impl NSObjectProtocol for MTLTileRenderPipelineColorAttachmentDescriptor {}

extern_methods!(
    unsafe impl MTLTileRenderPipelineColorAttachmentDescriptor {
        #[cfg(feature = "MTLPixelFormat")]
        #[method(pixelFormat)]
        pub unsafe fn pixel_format(&self) -> MTLPixelFormat;

        #[cfg(feature = "MTLPixelFormat")]
        #[method(setPixelFormat:)]
        pub unsafe fn set_pixel_format(&self, pixel_format: MTLPixelFormat);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MTLTileRenderPipelineColorAttachmentDescriptor {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLTileRenderPipelineColorAttachmentDescriptorArray;

    unsafe impl ClassType for MTLTileRenderPipelineColorAttachmentDescriptorArray {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSObjectProtocol for MTLTileRenderPipelineColorAttachmentDescriptorArray {}

extern_methods!(
    unsafe impl MTLTileRenderPipelineColorAttachmentDescriptorArray {
        #[method_id(@__retain_semantics Other objectAtIndexedSubscript:)]
        pub unsafe fn object_at_indexed_subscript(
            &self,
            attachment_index: NSUInteger,
        ) -> Retained<MTLTileRenderPipelineColorAttachmentDescriptor>;

        #[method(setObject:atIndexedSubscript:)]
        pub unsafe fn set_object_at_indexed_subscript(
            &self,
            attachment: &MTLTileRenderPipelineColorAttachmentDescriptor,
            attachment_index: NSUInteger,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MTLTileRenderPipelineColorAttachmentDescriptorArray {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLTileRenderPipelineDescriptor;

    unsafe impl ClassType for MTLTileRenderPipelineDescriptor {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSCopying for MTLTileRenderPipelineDescriptor {}

unsafe impl NSObjectProtocol for MTLTileRenderPipelineDescriptor {}

extern_methods!(
    unsafe impl MTLTileRenderPipelineDescriptor {
        #[method_id(@__retain_semantics Other label)]
        pub unsafe fn label(&self) -> Option<Retained<NSString>>;

        #[method(setLabel:)]
        pub unsafe fn set_label(&self, label: Option<&NSString>);

        #[cfg(feature = "MTLLibrary")]
        #[method_id(@__retain_semantics Other tileFunction)]
        pub unsafe fn tile_function(&self) -> Retained<ProtocolObject<dyn MTLFunction>>;

        #[cfg(feature = "MTLLibrary")]
        #[method(setTileFunction:)]
        pub unsafe fn set_tile_function(&self, tile_function: &ProtocolObject<dyn MTLFunction>);

        #[method(rasterSampleCount)]
        pub unsafe fn raster_sample_count(&self) -> NSUInteger;

        #[method(setRasterSampleCount:)]
        pub unsafe fn set_raster_sample_count(&self, raster_sample_count: NSUInteger);

        #[method_id(@__retain_semantics Other colorAttachments)]
        pub unsafe fn color_attachments(
            &self,
        ) -> Retained<MTLTileRenderPipelineColorAttachmentDescriptorArray>;

        #[method(threadgroupSizeMatchesTileSize)]
        pub unsafe fn threadgroup_size_matches_tile_size(&self) -> bool;

        #[method(setThreadgroupSizeMatchesTileSize:)]
        pub unsafe fn set_threadgroup_size_matches_tile_size(
            &self,
            threadgroup_size_matches_tile_size: bool,
        );

        #[cfg(feature = "MTLPipeline")]
        #[method_id(@__retain_semantics Other tileBuffers)]
        pub unsafe fn tile_buffers(&self) -> Retained<MTLPipelineBufferDescriptorArray>;

        #[method(maxTotalThreadsPerThreadgroup)]
        pub unsafe fn max_total_threads_per_threadgroup(&self) -> NSUInteger;

        #[method(setMaxTotalThreadsPerThreadgroup:)]
        pub unsafe fn set_max_total_threads_per_threadgroup(
            &self,
            max_total_threads_per_threadgroup: NSUInteger,
        );

        #[cfg(feature = "MTLBinaryArchive")]
        #[method_id(@__retain_semantics Other binaryArchives)]
        pub unsafe fn binary_archives(
            &self,
        ) -> Option<Retained<NSArray<ProtocolObject<dyn MTLBinaryArchive>>>>;

        #[cfg(feature = "MTLBinaryArchive")]
        #[method(setBinaryArchives:)]
        pub unsafe fn set_binary_archives(
            &self,
            binary_archives: Option<&NSArray<ProtocolObject<dyn MTLBinaryArchive>>>,
        );

        #[cfg(feature = "MTLDynamicLibrary")]
        #[method_id(@__retain_semantics Other preloadedLibraries)]
        pub unsafe fn preloaded_libraries(
            &self,
        ) -> Retained<NSArray<ProtocolObject<dyn MTLDynamicLibrary>>>;

        #[cfg(feature = "MTLDynamicLibrary")]
        #[method(setPreloadedLibraries:)]
        pub unsafe fn set_preloaded_libraries(
            &self,
            preloaded_libraries: &NSArray<ProtocolObject<dyn MTLDynamicLibrary>>,
        );

        #[cfg(feature = "MTLLinkedFunctions")]
        #[method_id(@__retain_semantics Other linkedFunctions)]
        pub unsafe fn linked_functions(&self) -> Retained<MTLLinkedFunctions>;

        #[cfg(feature = "MTLLinkedFunctions")]
        #[method(setLinkedFunctions:)]
        pub unsafe fn set_linked_functions(&self, linked_functions: Option<&MTLLinkedFunctions>);

        #[method(supportAddingBinaryFunctions)]
        pub unsafe fn support_adding_binary_functions(&self) -> bool;

        #[method(setSupportAddingBinaryFunctions:)]
        pub unsafe fn set_support_adding_binary_functions(
            &self,
            support_adding_binary_functions: bool,
        );

        #[method(maxCallStackDepth)]
        pub unsafe fn max_call_stack_depth(&self) -> NSUInteger;

        #[method(setMaxCallStackDepth:)]
        pub unsafe fn set_max_call_stack_depth(&self, max_call_stack_depth: NSUInteger);

        #[method(reset)]
        pub unsafe fn reset(&self);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MTLTileRenderPipelineDescriptor {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct MTLMeshRenderPipelineDescriptor;

    unsafe impl ClassType for MTLMeshRenderPipelineDescriptor {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSCopying for MTLMeshRenderPipelineDescriptor {}

unsafe impl NSObjectProtocol for MTLMeshRenderPipelineDescriptor {}

extern_methods!(
    unsafe impl MTLMeshRenderPipelineDescriptor {
        #[method_id(@__retain_semantics Other label)]
        pub unsafe fn label(&self) -> Option<Retained<NSString>>;

        #[method(setLabel:)]
        pub unsafe fn set_label(&self, label: Option<&NSString>);

        #[cfg(feature = "MTLLibrary")]
        #[method_id(@__retain_semantics Other objectFunction)]
        pub unsafe fn object_function(&self) -> Option<Retained<ProtocolObject<dyn MTLFunction>>>;

        #[cfg(feature = "MTLLibrary")]
        #[method(setObjectFunction:)]
        pub unsafe fn set_object_function(
            &self,
            object_function: Option<&ProtocolObject<dyn MTLFunction>>,
        );

        #[cfg(feature = "MTLLibrary")]
        #[method_id(@__retain_semantics Other meshFunction)]
        pub unsafe fn mesh_function(&self) -> Option<Retained<ProtocolObject<dyn MTLFunction>>>;

        #[cfg(feature = "MTLLibrary")]
        #[method(setMeshFunction:)]
        pub unsafe fn set_mesh_function(
            &self,
            mesh_function: Option<&ProtocolObject<dyn MTLFunction>>,
        );

        #[cfg(feature = "MTLLibrary")]
        #[method_id(@__retain_semantics Other fragmentFunction)]
        pub unsafe fn fragment_function(&self)
            -> Option<Retained<ProtocolObject<dyn MTLFunction>>>;

        #[cfg(feature = "MTLLibrary")]
        #[method(setFragmentFunction:)]
        pub unsafe fn set_fragment_function(
            &self,
            fragment_function: Option<&ProtocolObject<dyn MTLFunction>>,
        );

        #[method(maxTotalThreadsPerObjectThreadgroup)]
        pub unsafe fn max_total_threads_per_object_threadgroup(&self) -> NSUInteger;

        #[method(setMaxTotalThreadsPerObjectThreadgroup:)]
        pub unsafe fn set_max_total_threads_per_object_threadgroup(
            &self,
            max_total_threads_per_object_threadgroup: NSUInteger,
        );

        #[method(maxTotalThreadsPerMeshThreadgroup)]
        pub unsafe fn max_total_threads_per_mesh_threadgroup(&self) -> NSUInteger;

        #[method(setMaxTotalThreadsPerMeshThreadgroup:)]
        pub unsafe fn set_max_total_threads_per_mesh_threadgroup(
            &self,
            max_total_threads_per_mesh_threadgroup: NSUInteger,
        );

        #[method(objectThreadgroupSizeIsMultipleOfThreadExecutionWidth)]
        pub unsafe fn object_threadgroup_size_is_multiple_of_thread_execution_width(&self) -> bool;

        #[method(setObjectThreadgroupSizeIsMultipleOfThreadExecutionWidth:)]
        pub unsafe fn set_object_threadgroup_size_is_multiple_of_thread_execution_width(
            &self,
            object_threadgroup_size_is_multiple_of_thread_execution_width: bool,
        );

        #[method(meshThreadgroupSizeIsMultipleOfThreadExecutionWidth)]
        pub unsafe fn mesh_threadgroup_size_is_multiple_of_thread_execution_width(&self) -> bool;

        #[method(setMeshThreadgroupSizeIsMultipleOfThreadExecutionWidth:)]
        pub unsafe fn set_mesh_threadgroup_size_is_multiple_of_thread_execution_width(
            &self,
            mesh_threadgroup_size_is_multiple_of_thread_execution_width: bool,
        );

        #[method(payloadMemoryLength)]
        pub unsafe fn payload_memory_length(&self) -> NSUInteger;

        #[method(setPayloadMemoryLength:)]
        pub unsafe fn set_payload_memory_length(&self, payload_memory_length: NSUInteger);

        #[method(maxTotalThreadgroupsPerMeshGrid)]
        pub unsafe fn max_total_threadgroups_per_mesh_grid(&self) -> NSUInteger;

        #[method(setMaxTotalThreadgroupsPerMeshGrid:)]
        pub unsafe fn set_max_total_threadgroups_per_mesh_grid(
            &self,
            max_total_threadgroups_per_mesh_grid: NSUInteger,
        );

        #[cfg(feature = "MTLPipeline")]
        #[method_id(@__retain_semantics Other objectBuffers)]
        pub unsafe fn object_buffers(&self) -> Retained<MTLPipelineBufferDescriptorArray>;

        #[cfg(feature = "MTLPipeline")]
        #[method_id(@__retain_semantics Other meshBuffers)]
        pub unsafe fn mesh_buffers(&self) -> Retained<MTLPipelineBufferDescriptorArray>;

        #[cfg(feature = "MTLPipeline")]
        #[method_id(@__retain_semantics Other fragmentBuffers)]
        pub unsafe fn fragment_buffers(&self) -> Retained<MTLPipelineBufferDescriptorArray>;

        #[method(rasterSampleCount)]
        pub unsafe fn raster_sample_count(&self) -> NSUInteger;

        #[method(setRasterSampleCount:)]
        pub unsafe fn set_raster_sample_count(&self, raster_sample_count: NSUInteger);

        #[method(isAlphaToCoverageEnabled)]
        pub unsafe fn is_alpha_to_coverage_enabled(&self) -> bool;

        #[method(setAlphaToCoverageEnabled:)]
        pub unsafe fn set_alpha_to_coverage_enabled(&self, alpha_to_coverage_enabled: bool);

        #[method(isAlphaToOneEnabled)]
        pub unsafe fn is_alpha_to_one_enabled(&self) -> bool;

        #[method(setAlphaToOneEnabled:)]
        pub unsafe fn set_alpha_to_one_enabled(&self, alpha_to_one_enabled: bool);

        #[method(isRasterizationEnabled)]
        pub unsafe fn is_rasterization_enabled(&self) -> bool;

        #[method(setRasterizationEnabled:)]
        pub unsafe fn set_rasterization_enabled(&self, rasterization_enabled: bool);

        #[method(maxVertexAmplificationCount)]
        pub unsafe fn max_vertex_amplification_count(&self) -> NSUInteger;

        #[method(setMaxVertexAmplificationCount:)]
        pub unsafe fn set_max_vertex_amplification_count(
            &self,
            max_vertex_amplification_count: NSUInteger,
        );

        #[method_id(@__retain_semantics Other colorAttachments)]
        pub unsafe fn color_attachments(
            &self,
        ) -> Retained<MTLRenderPipelineColorAttachmentDescriptorArray>;

        #[cfg(feature = "MTLPixelFormat")]
        #[method(depthAttachmentPixelFormat)]
        pub unsafe fn depth_attachment_pixel_format(&self) -> MTLPixelFormat;

        #[cfg(feature = "MTLPixelFormat")]
        #[method(setDepthAttachmentPixelFormat:)]
        pub unsafe fn set_depth_attachment_pixel_format(
            &self,
            depth_attachment_pixel_format: MTLPixelFormat,
        );

        #[cfg(feature = "MTLPixelFormat")]
        #[method(stencilAttachmentPixelFormat)]
        pub unsafe fn stencil_attachment_pixel_format(&self) -> MTLPixelFormat;

        #[cfg(feature = "MTLPixelFormat")]
        #[method(setStencilAttachmentPixelFormat:)]
        pub unsafe fn set_stencil_attachment_pixel_format(
            &self,
            stencil_attachment_pixel_format: MTLPixelFormat,
        );

        #[method(supportIndirectCommandBuffers)]
        pub unsafe fn support_indirect_command_buffers(&self) -> bool;

        #[method(setSupportIndirectCommandBuffers:)]
        pub unsafe fn set_support_indirect_command_buffers(
            &self,
            support_indirect_command_buffers: bool,
        );

        #[cfg(feature = "MTLLinkedFunctions")]
        #[method_id(@__retain_semantics Other objectLinkedFunctions)]
        pub unsafe fn object_linked_functions(&self) -> Retained<MTLLinkedFunctions>;

        #[cfg(feature = "MTLLinkedFunctions")]
        #[method(setObjectLinkedFunctions:)]
        pub unsafe fn set_object_linked_functions(
            &self,
            object_linked_functions: Option<&MTLLinkedFunctions>,
        );

        #[cfg(feature = "MTLLinkedFunctions")]
        #[method_id(@__retain_semantics Other meshLinkedFunctions)]
        pub unsafe fn mesh_linked_functions(&self) -> Retained<MTLLinkedFunctions>;

        #[cfg(feature = "MTLLinkedFunctions")]
        #[method(setMeshLinkedFunctions:)]
        pub unsafe fn set_mesh_linked_functions(
            &self,
            mesh_linked_functions: Option<&MTLLinkedFunctions>,
        );

        #[cfg(feature = "MTLLinkedFunctions")]
        #[method_id(@__retain_semantics Other fragmentLinkedFunctions)]
        pub unsafe fn fragment_linked_functions(&self) -> Retained<MTLLinkedFunctions>;

        #[cfg(feature = "MTLLinkedFunctions")]
        #[method(setFragmentLinkedFunctions:)]
        pub unsafe fn set_fragment_linked_functions(
            &self,
            fragment_linked_functions: Option<&MTLLinkedFunctions>,
        );

        #[method(reset)]
        pub unsafe fn reset(&self);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl MTLMeshRenderPipelineDescriptor {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
