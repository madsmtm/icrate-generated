//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

ns_enum!(
    #[underlying(NSInteger)]
    #[cfg(not(any(target_os = "ios")))]
    pub enum NSColorPanelMode {
        #[cfg(not(any(target_os = "ios")))]
        NSColorPanelModeNone = -1,
        #[cfg(not(any(target_os = "ios")))]
        NSColorPanelModeGray = 0,
        #[cfg(not(any(target_os = "ios")))]
        NSColorPanelModeRGB = 1,
        #[cfg(not(any(target_os = "ios")))]
        NSColorPanelModeCMYK = 2,
        #[cfg(not(any(target_os = "ios")))]
        NSColorPanelModeHSB = 3,
        #[cfg(not(any(target_os = "ios")))]
        NSColorPanelModeCustomPalette = 4,
        #[cfg(not(any(target_os = "ios")))]
        NSColorPanelModeColorList = 5,
        #[cfg(not(any(target_os = "ios")))]
        NSColorPanelModeWheel = 6,
        #[cfg(not(any(target_os = "ios")))]
        NSColorPanelModeCrayon = 7,
    }
);

ns_options!(
    #[underlying(NSUInteger)]
    #[cfg(not(any(target_os = "ios")))]
    pub enum NSColorPanelOptions {
        #[cfg(not(any(target_os = "ios")))]
        NSColorPanelGrayModeMask = 0x00000001,
        #[cfg(not(any(target_os = "ios")))]
        NSColorPanelRGBModeMask = 0x00000002,
        #[cfg(not(any(target_os = "ios")))]
        NSColorPanelCMYKModeMask = 0x00000004,
        #[cfg(not(any(target_os = "ios")))]
        NSColorPanelHSBModeMask = 0x00000008,
        #[cfg(not(any(target_os = "ios")))]
        NSColorPanelCustomPaletteModeMask = 0x00000010,
        #[cfg(not(any(target_os = "ios")))]
        NSColorPanelColorListModeMask = 0x00000020,
        #[cfg(not(any(target_os = "ios")))]
        NSColorPanelWheelModeMask = 0x00000040,
        #[cfg(not(any(target_os = "ios")))]
        NSColorPanelCrayonModeMask = 0x00000080,
        #[cfg(not(any(target_os = "ios")))]
        NSColorPanelAllModesMask = 0x0000ffff,
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "AppKit_NSColorPanel")]
    #[cfg(not(any(target_os = "ios")))]
    pub struct NSColorPanel;

    #[cfg(feature = "AppKit_NSColorPanel")]
    unsafe impl ClassType for NSColorPanel {
        #[inherits(NSWindow, NSResponder, NSObject)]
        type Super = NSPanel;
    }
);

#[cfg(feature = "AppKit_NSColorPanel")]
unsafe impl NSAccessibility for NSColorPanel {}

#[cfg(feature = "AppKit_NSColorPanel")]
unsafe impl NSAccessibilityElementProtocol for NSColorPanel {}

#[cfg(feature = "AppKit_NSColorPanel")]
unsafe impl NSAnimatablePropertyContainer for NSColorPanel {}

#[cfg(feature = "AppKit_NSColorPanel")]
unsafe impl NSAppearanceCustomization for NSColorPanel {}

#[cfg(feature = "AppKit_NSColorPanel")]
unsafe impl NSCoding for NSColorPanel {}

#[cfg(feature = "AppKit_NSColorPanel")]
unsafe impl NSMenuItemValidation for NSColorPanel {}

#[cfg(feature = "AppKit_NSColorPanel")]
unsafe impl NSObjectProtocol for NSColorPanel {}

#[cfg(feature = "AppKit_NSColorPanel")]
unsafe impl NSUserInterfaceItemIdentification for NSColorPanel {}

#[cfg(feature = "AppKit_NSColorPanel")]
unsafe impl NSUserInterfaceValidations for NSColorPanel {}

extern_methods!(
    #[cfg(feature = "AppKit_NSColorPanel")]
    unsafe impl NSColorPanel {
        #[cfg(not(any(target_os = "ios")))]
        #[method_id(@__retain_semantics Other sharedColorPanel)]
        pub unsafe fn sharedColorPanel() -> Id<NSColorPanel>;

        #[cfg(not(any(target_os = "ios")))]
        #[method(sharedColorPanelExists)]
        pub unsafe fn sharedColorPanelExists() -> bool;

        #[cfg(all(
            feature = "AppKit_NSColor",
            feature = "AppKit_NSEvent",
            feature = "AppKit_NSView"
        ))]
        #[cfg(not(any(target_os = "ios")))]
        #[method(dragColor:withEvent:fromView:)]
        pub unsafe fn dragColor_withEvent_fromView(
            color: &NSColor,
            event: &NSEvent,
            source_view: &NSView,
        ) -> bool;

        #[cfg(not(any(target_os = "ios")))]
        #[method(setPickerMask:)]
        pub unsafe fn setPickerMask(mask: NSColorPanelOptions);

        #[cfg(not(any(target_os = "ios")))]
        #[method(setPickerMode:)]
        pub unsafe fn setPickerMode(mode: NSColorPanelMode);

        #[cfg(feature = "AppKit_NSView")]
        #[cfg(not(any(target_os = "ios")))]
        #[method_id(@__retain_semantics Other accessoryView)]
        pub unsafe fn accessoryView(&self) -> Option<Id<NSView>>;

        #[cfg(feature = "AppKit_NSView")]
        #[cfg(not(any(target_os = "ios")))]
        #[method(setAccessoryView:)]
        pub unsafe fn setAccessoryView(&self, accessory_view: Option<&NSView>);

        #[cfg(not(any(target_os = "ios")))]
        #[method(isContinuous)]
        pub unsafe fn isContinuous(&self) -> bool;

        #[cfg(not(any(target_os = "ios")))]
        #[method(setContinuous:)]
        pub unsafe fn setContinuous(&self, continuous: bool);

        #[cfg(not(any(target_os = "ios")))]
        #[method(showsAlpha)]
        pub unsafe fn showsAlpha(&self) -> bool;

        #[cfg(not(any(target_os = "ios")))]
        #[method(setShowsAlpha:)]
        pub unsafe fn setShowsAlpha(&self, shows_alpha: bool);

        #[cfg(not(any(target_os = "ios")))]
        #[method(mode)]
        pub unsafe fn mode(&self) -> NSColorPanelMode;

        #[cfg(not(any(target_os = "ios")))]
        #[method(setMode:)]
        pub unsafe fn setMode(&self, mode: NSColorPanelMode);

        #[cfg(feature = "AppKit_NSColor")]
        #[cfg(not(any(target_os = "ios")))]
        #[method_id(@__retain_semantics Other color)]
        pub unsafe fn color(&self) -> Id<NSColor>;

        #[cfg(feature = "AppKit_NSColor")]
        #[cfg(not(any(target_os = "ios")))]
        #[method(setColor:)]
        pub unsafe fn setColor(&self, color: &NSColor);

        #[cfg(not(any(target_os = "ios")))]
        #[method(alpha)]
        pub unsafe fn alpha(&self) -> CGFloat;

        #[cfg(not(any(target_os = "ios")))]
        #[method(setAction:)]
        pub unsafe fn setAction(&self, selector: Option<Sel>);

        #[cfg(not(any(target_os = "ios")))]
        #[method(setTarget:)]
        pub unsafe fn setTarget(&self, target: Option<&Object>);

        #[cfg(feature = "AppKit_NSColorList")]
        #[cfg(not(any(target_os = "ios")))]
        #[method(attachColorList:)]
        pub unsafe fn attachColorList(&self, color_list: &NSColorList);

        #[cfg(feature = "AppKit_NSColorList")]
        #[cfg(not(any(target_os = "ios")))]
        #[method(detachColorList:)]
        pub unsafe fn detachColorList(&self, color_list: &NSColorList);
    }
);

extern_methods!(
    /// NSColorPanel
    #[cfg(feature = "AppKit_NSApplication")]
    unsafe impl NSApplication {
        #[cfg(not(any(target_os = "ios")))]
        #[method(orderFrontColorPanel:)]
        pub unsafe fn orderFrontColorPanel(&self, sender: Option<&Object>);
    }
);

extern_protocol!(
    #[cfg(not(any(target_os = "ios")))]
    pub unsafe trait NSColorChanging: NSObjectProtocol {
        #[cfg(feature = "AppKit_NSColorPanel")]
        #[cfg(not(any(target_os = "ios")))]
        #[method(changeColor:)]
        unsafe fn changeColor(&self, sender: Option<&NSColorPanel>);
    }

    unsafe impl ProtocolType for dyn NSColorChanging {}
);

extern_static!(NSColorPanelColorDidChangeNotification: &'static NSNotificationName);

extern_static!(NSNoModeColorPanel: NSColorPanelMode = NSColorPanelModeNone);

extern_static!(NSGrayModeColorPanel: NSColorPanelMode = NSColorPanelModeGray);

extern_static!(NSRGBModeColorPanel: NSColorPanelMode = NSColorPanelModeRGB);

extern_static!(NSCMYKModeColorPanel: NSColorPanelMode = NSColorPanelModeCMYK);

extern_static!(NSHSBModeColorPanel: NSColorPanelMode = NSColorPanelModeHSB);

extern_static!(NSCustomPaletteModeColorPanel: NSColorPanelMode = NSColorPanelModeCustomPalette);

extern_static!(NSColorListModeColorPanel: NSColorPanelMode = NSColorPanelModeColorList);

extern_static!(NSWheelModeColorPanel: NSColorPanelMode = NSColorPanelModeWheel);

extern_static!(NSCrayonModeColorPanel: NSColorPanelMode = NSColorPanelModeCrayon);

extern_methods!(
    /// Methods declared on superclass `NSWindow`
    #[cfg(feature = "AppKit_NSColorPanel")]
    unsafe impl NSColorPanel {
        #[cfg(not(any(target_os = "ios")))]
        #[method_id(@__retain_semantics Init initWithContentRect:styleMask:backing:defer:)]
        pub unsafe fn initWithContentRect_styleMask_backing_defer(
            this: Option<Allocated<Self>>,
            content_rect: NSRect,
            style: NSWindowStyleMask,
            backing_store_type: NSBackingStoreType,
            flag: bool,
        ) -> Id<Self>;

        #[cfg(feature = "AppKit_NSScreen")]
        #[cfg(not(any(target_os = "ios")))]
        #[method_id(@__retain_semantics Init initWithContentRect:styleMask:backing:defer:screen:)]
        pub unsafe fn initWithContentRect_styleMask_backing_defer_screen(
            this: Option<Allocated<Self>>,
            content_rect: NSRect,
            style: NSWindowStyleMask,
            backing_store_type: NSBackingStoreType,
            flag: bool,
            screen: Option<&NSScreen>,
        ) -> Id<Self>;

        #[cfg(feature = "AppKit_NSViewController")]
        #[cfg(not(any(target_os = "ios")))]
        #[method_id(@__retain_semantics Other windowWithContentViewController:)]
        pub unsafe fn windowWithContentViewController(
            content_view_controller: &NSViewController,
        ) -> Id<Self>;
    }
);
