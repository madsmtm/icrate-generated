//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

ns_enum!(
    #[underlying(NSUInteger)]
    #[cfg(not(any(target_os = "ios")))]
    pub enum NSTIFFCompression {
        #[cfg(not(any(target_os = "ios")))]
        NSTIFFCompressionNone = 1,
        #[cfg(not(any(target_os = "ios")))]
        NSTIFFCompressionCCITTFAX3 = 3,
        #[cfg(not(any(target_os = "ios")))]
        NSTIFFCompressionCCITTFAX4 = 4,
        #[cfg(not(any(target_os = "ios")))]
        NSTIFFCompressionLZW = 5,
        #[cfg(not(any(target_os = "ios")))]
        NSTIFFCompressionJPEG = 6,
        #[cfg(not(any(target_os = "ios")))]
        NSTIFFCompressionNEXT = 32766,
        #[cfg(not(any(target_os = "ios")))]
        NSTIFFCompressionPackBits = 32773,
        #[cfg(not(any(target_os = "ios")))]
        NSTIFFCompressionOldJPEG = 32865,
    }
);

ns_enum!(
    #[underlying(NSUInteger)]
    #[cfg(not(any(target_os = "ios")))]
    pub enum NSBitmapImageFileType {
        #[cfg(not(any(target_os = "ios")))]
        NSBitmapImageFileTypeTIFF = 0,
        #[cfg(not(any(target_os = "ios")))]
        NSBitmapImageFileTypeBMP = 1,
        #[cfg(not(any(target_os = "ios")))]
        NSBitmapImageFileTypeGIF = 2,
        #[cfg(not(any(target_os = "ios")))]
        NSBitmapImageFileTypeJPEG = 3,
        #[cfg(not(any(target_os = "ios")))]
        NSBitmapImageFileTypePNG = 4,
        #[cfg(not(any(target_os = "ios")))]
        NSBitmapImageFileTypeJPEG2000 = 5,
    }
);

ns_enum!(
    #[underlying(NSInteger)]
    #[cfg(not(any(target_os = "ios")))]
    pub enum NSImageRepLoadStatus {
        #[cfg(not(any(target_os = "ios")))]
        NSImageRepLoadStatusUnknownType = -1,
        #[cfg(not(any(target_os = "ios")))]
        NSImageRepLoadStatusReadingHeader = -2,
        #[cfg(not(any(target_os = "ios")))]
        NSImageRepLoadStatusWillNeedAllData = -3,
        #[cfg(not(any(target_os = "ios")))]
        NSImageRepLoadStatusInvalidData = -4,
        #[cfg(not(any(target_os = "ios")))]
        NSImageRepLoadStatusUnexpectedEOF = -5,
        #[cfg(not(any(target_os = "ios")))]
        NSImageRepLoadStatusCompleted = -6,
    }
);

ns_options!(
    #[underlying(NSUInteger)]
    #[cfg(not(any(target_os = "ios")))]
    pub enum NSBitmapFormat {
        #[cfg(not(any(target_os = "ios")))]
        NSBitmapFormatAlphaFirst = 1 << 0,
        #[cfg(not(any(target_os = "ios")))]
        NSBitmapFormatAlphaNonpremultiplied = 1 << 1,
        #[cfg(not(any(target_os = "ios")))]
        NSBitmapFormatFloatingPointSamples = 1 << 2,
        #[cfg(not(any(target_os = "ios")))]
        NSBitmapFormatSixteenBitLittleEndian = 1 << 8,
        #[cfg(not(any(target_os = "ios")))]
        NSBitmapFormatThirtyTwoBitLittleEndian = 1 << 9,
        #[cfg(not(any(target_os = "ios")))]
        NSBitmapFormatSixteenBitBigEndian = 1 << 10,
        #[cfg(not(any(target_os = "ios")))]
        NSBitmapFormatThirtyTwoBitBigEndian = 1 << 11,
    }
);

typed_extensible_enum!(
    pub type NSBitmapImageRepPropertyKey = NSString;
);

extern_static!(NSImageCompressionMethod: &'static NSBitmapImageRepPropertyKey);

extern_static!(NSImageCompressionFactor: &'static NSBitmapImageRepPropertyKey);

extern_static!(NSImageDitherTransparency: &'static NSBitmapImageRepPropertyKey);

extern_static!(NSImageRGBColorTable: &'static NSBitmapImageRepPropertyKey);

extern_static!(NSImageInterlaced: &'static NSBitmapImageRepPropertyKey);

extern_static!(NSImageColorSyncProfileData: &'static NSBitmapImageRepPropertyKey);

extern_static!(NSImageFrameCount: &'static NSBitmapImageRepPropertyKey);

extern_static!(NSImageCurrentFrame: &'static NSBitmapImageRepPropertyKey);

extern_static!(NSImageCurrentFrameDuration: &'static NSBitmapImageRepPropertyKey);

extern_static!(NSImageLoopCount: &'static NSBitmapImageRepPropertyKey);

extern_static!(NSImageGamma: &'static NSBitmapImageRepPropertyKey);

extern_static!(NSImageProgressive: &'static NSBitmapImageRepPropertyKey);

extern_static!(NSImageEXIFData: &'static NSBitmapImageRepPropertyKey);

extern_static!(NSImageIPTCData: &'static NSBitmapImageRepPropertyKey);

extern_static!(NSImageFallbackBackgroundColor: &'static NSBitmapImageRepPropertyKey);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "AppKit_NSBitmapImageRep")]
    #[cfg(not(any(target_os = "ios")))]
    pub struct NSBitmapImageRep;

    #[cfg(feature = "AppKit_NSBitmapImageRep")]
    unsafe impl ClassType for NSBitmapImageRep {
        #[inherits(NSObject)]
        type Super = NSImageRep;
    }
);

#[cfg(feature = "AppKit_NSBitmapImageRep")]
unsafe impl NSCoding for NSBitmapImageRep {}

#[cfg(feature = "AppKit_NSBitmapImageRep")]
unsafe impl NSObjectProtocol for NSBitmapImageRep {}

#[cfg(feature = "AppKit_NSBitmapImageRep")]
unsafe impl NSSecureCoding for NSBitmapImageRep {}

extern_methods!(
    #[cfg(feature = "AppKit_NSBitmapImageRep")]
    unsafe impl NSBitmapImageRep {
        #[deprecated = "Use -[NSView cacheDisplayInRect:toBitmapImageRep:] to snapshot a view."]
        #[cfg(not(any(target_os = "ios")))]
        #[method_id(@__retain_semantics Init initWithFocusedViewRect:)]
        pub unsafe fn initWithFocusedViewRect(
            this: Option<Allocated<Self>>,
            rect: NSRect,
        ) -> Option<Id<Self>>;

        #[cfg(not(any(target_os = "ios")))]
        #[method_id(@__retain_semantics Init initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bytesPerRow:bitsPerPixel:)]
        pub unsafe fn initWithBitmapDataPlanes_pixelsWide_pixelsHigh_bitsPerSample_samplesPerPixel_hasAlpha_isPlanar_colorSpaceName_bytesPerRow_bitsPerPixel(
            this: Option<Allocated<Self>>,
            planes: *mut *mut c_uchar,
            width: NSInteger,
            height: NSInteger,
            bps: NSInteger,
            spp: NSInteger,
            alpha: bool,
            is_planar: bool,
            color_space_name: &NSColorSpaceName,
            r_bytes: NSInteger,
            p_bits: NSInteger,
        ) -> Option<Id<Self>>;

        #[cfg(not(any(target_os = "ios")))]
        #[method_id(@__retain_semantics Init initWithBitmapDataPlanes:pixelsWide:pixelsHigh:bitsPerSample:samplesPerPixel:hasAlpha:isPlanar:colorSpaceName:bitmapFormat:bytesPerRow:bitsPerPixel:)]
        pub unsafe fn initWithBitmapDataPlanes_pixelsWide_pixelsHigh_bitsPerSample_samplesPerPixel_hasAlpha_isPlanar_colorSpaceName_bitmapFormat_bytesPerRow_bitsPerPixel(
            this: Option<Allocated<Self>>,
            planes: *mut *mut c_uchar,
            width: NSInteger,
            height: NSInteger,
            bps: NSInteger,
            spp: NSInteger,
            alpha: bool,
            is_planar: bool,
            color_space_name: &NSColorSpaceName,
            bitmap_format: NSBitmapFormat,
            r_bytes: NSInteger,
            p_bits: NSInteger,
        ) -> Option<Id<Self>>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSData"))]
        #[cfg(not(any(target_os = "ios")))]
        #[method_id(@__retain_semantics Other imageRepsWithData:)]
        pub unsafe fn imageRepsWithData(data: &NSData) -> Id<NSArray<NSImageRep>>;

        #[cfg(feature = "Foundation_NSData")]
        #[cfg(not(any(target_os = "ios")))]
        #[method_id(@__retain_semantics Other imageRepWithData:)]
        pub unsafe fn imageRepWithData(data: &NSData) -> Option<Id<Self>>;

        #[cfg(feature = "Foundation_NSData")]
        #[cfg(not(any(target_os = "ios")))]
        #[method_id(@__retain_semantics Init initWithData:)]
        pub unsafe fn initWithData(
            this: Option<Allocated<Self>>,
            data: &NSData,
        ) -> Option<Id<Self>>;

        #[cfg(not(any(target_os = "ios")))]
        #[method(bitmapData)]
        pub unsafe fn bitmapData(&self) -> *mut c_uchar;

        #[cfg(not(any(target_os = "ios")))]
        #[method(getBitmapDataPlanes:)]
        pub unsafe fn getBitmapDataPlanes(&self, data: NonNull<*mut c_uchar>);

        #[cfg(not(any(target_os = "ios")))]
        #[method(isPlanar)]
        pub unsafe fn isPlanar(&self) -> bool;

        #[cfg(not(any(target_os = "ios")))]
        #[method(samplesPerPixel)]
        pub unsafe fn samplesPerPixel(&self) -> NSInteger;

        #[cfg(not(any(target_os = "ios")))]
        #[method(bitsPerPixel)]
        pub unsafe fn bitsPerPixel(&self) -> NSInteger;

        #[cfg(not(any(target_os = "ios")))]
        #[method(bytesPerRow)]
        pub unsafe fn bytesPerRow(&self) -> NSInteger;

        #[cfg(not(any(target_os = "ios")))]
        #[method(bytesPerPlane)]
        pub unsafe fn bytesPerPlane(&self) -> NSInteger;

        #[cfg(not(any(target_os = "ios")))]
        #[method(numberOfPlanes)]
        pub unsafe fn numberOfPlanes(&self) -> NSInteger;

        #[cfg(not(any(target_os = "ios")))]
        #[method(bitmapFormat)]
        pub unsafe fn bitmapFormat(&self) -> NSBitmapFormat;

        #[cfg(not(any(target_os = "ios")))]
        #[method(getCompression:factor:)]
        pub unsafe fn getCompression_factor(
            &self,
            compression: *mut NSTIFFCompression,
            factor: *mut c_float,
        );

        #[cfg(not(any(target_os = "ios")))]
        #[method(setCompression:factor:)]
        pub unsafe fn setCompression_factor(&self, compression: NSTIFFCompression, factor: c_float);

        #[cfg(feature = "Foundation_NSData")]
        #[cfg(not(any(target_os = "ios")))]
        #[method_id(@__retain_semantics Other TIFFRepresentation)]
        pub unsafe fn TIFFRepresentation(&self) -> Option<Id<NSData>>;

        #[cfg(feature = "Foundation_NSData")]
        #[cfg(not(any(target_os = "ios")))]
        #[method_id(@__retain_semantics Other TIFFRepresentationUsingCompression:factor:)]
        pub unsafe fn TIFFRepresentationUsingCompression_factor(
            &self,
            comp: NSTIFFCompression,
            factor: c_float,
        ) -> Option<Id<NSData>>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSData"))]
        #[cfg(not(any(target_os = "ios")))]
        #[method_id(@__retain_semantics Other TIFFRepresentationOfImageRepsInArray:)]
        pub unsafe fn TIFFRepresentationOfImageRepsInArray(
            array: &NSArray<NSImageRep>,
        ) -> Option<Id<NSData>>;

        #[cfg(all(feature = "Foundation_NSArray", feature = "Foundation_NSData"))]
        #[cfg(not(any(target_os = "ios")))]
        #[method_id(@__retain_semantics Other TIFFRepresentationOfImageRepsInArray:usingCompression:factor:)]
        pub unsafe fn TIFFRepresentationOfImageRepsInArray_usingCompression_factor(
            array: &NSArray<NSImageRep>,
            comp: NSTIFFCompression,
            factor: c_float,
        ) -> Option<Id<NSData>>;

        #[cfg(not(any(target_os = "ios")))]
        #[method(getTIFFCompressionTypes:count:)]
        pub unsafe fn getTIFFCompressionTypes_count(
            list: NonNull<*mut NSTIFFCompression>,
            num_types: NonNull<NSInteger>,
        );

        #[cfg(feature = "Foundation_NSString")]
        #[cfg(not(any(target_os = "ios")))]
        #[method_id(@__retain_semantics Other localizedNameForTIFFCompressionType:)]
        pub unsafe fn localizedNameForTIFFCompressionType(
            compression: NSTIFFCompression,
        ) -> Option<Id<NSString>>;

        #[cfg(not(any(target_os = "ios")))]
        #[method(canBeCompressedUsing:)]
        pub unsafe fn canBeCompressedUsing(&self, compression: NSTIFFCompression) -> bool;

        #[cfg(feature = "AppKit_NSColor")]
        #[cfg(not(any(target_os = "ios")))]
        #[method(colorizeByMappingGray:toColor:blackMapping:whiteMapping:)]
        pub unsafe fn colorizeByMappingGray_toColor_blackMapping_whiteMapping(
            &self,
            mid_point: CGFloat,
            mid_point_color: Option<&NSColor>,
            shadow_color: Option<&NSColor>,
            light_color: Option<&NSColor>,
        );

        #[cfg(not(any(target_os = "ios")))]
        #[method_id(@__retain_semantics Init initForIncrementalLoad)]
        pub unsafe fn initForIncrementalLoad(this: Option<Allocated<Self>>) -> Id<Self>;

        #[cfg(feature = "Foundation_NSData")]
        #[cfg(not(any(target_os = "ios")))]
        #[method(incrementalLoadFromData:complete:)]
        pub unsafe fn incrementalLoadFromData_complete(
            &self,
            data: &NSData,
            complete: bool,
        ) -> NSInteger;

        #[cfg(feature = "AppKit_NSColor")]
        #[cfg(not(any(target_os = "ios")))]
        #[method(setColor:atX:y:)]
        pub unsafe fn setColor_atX_y(&self, color: &NSColor, x: NSInteger, y: NSInteger);

        #[cfg(feature = "AppKit_NSColor")]
        #[cfg(not(any(target_os = "ios")))]
        #[method_id(@__retain_semantics Other colorAtX:y:)]
        pub unsafe fn colorAtX_y(&self, x: NSInteger, y: NSInteger) -> Option<Id<NSColor>>;

        #[cfg(not(any(target_os = "ios")))]
        #[method(getPixel:atX:y:)]
        pub unsafe fn getPixel_atX_y(&self, p: NonNull<NSUInteger>, x: NSInteger, y: NSInteger);

        #[cfg(not(any(target_os = "ios")))]
        #[method(setPixel:atX:y:)]
        pub unsafe fn setPixel_atX_y(&self, p: NonNull<NSUInteger>, x: NSInteger, y: NSInteger);

        #[cfg(feature = "AppKit_NSColorSpace")]
        #[cfg(not(any(target_os = "ios")))]
        #[method_id(@__retain_semantics Other colorSpace)]
        pub unsafe fn colorSpace(&self) -> Id<NSColorSpace>;

        #[cfg(feature = "AppKit_NSColorSpace")]
        #[cfg(not(any(target_os = "ios")))]
        #[method_id(@__retain_semantics Other bitmapImageRepByConvertingToColorSpace:renderingIntent:)]
        pub unsafe fn bitmapImageRepByConvertingToColorSpace_renderingIntent(
            &self,
            target_space: &NSColorSpace,
            rendering_intent: NSColorRenderingIntent,
        ) -> Option<Id<NSBitmapImageRep>>;

        #[cfg(feature = "AppKit_NSColorSpace")]
        #[cfg(not(any(target_os = "ios")))]
        #[method_id(@__retain_semantics Other bitmapImageRepByRetaggingWithColorSpace:)]
        pub unsafe fn bitmapImageRepByRetaggingWithColorSpace(
            &self,
            new_space: &NSColorSpace,
        ) -> Option<Id<NSBitmapImageRep>>;
    }
);

extern_methods!(
    /// NSBitmapImageFileTypeExtensions
    #[cfg(feature = "AppKit_NSBitmapImageRep")]
    unsafe impl NSBitmapImageRep {
        #[cfg(all(
            feature = "AppKit_NSImageRep",
            feature = "Foundation_NSArray",
            feature = "Foundation_NSData",
            feature = "Foundation_NSDictionary"
        ))]
        #[cfg(not(any(target_os = "ios")))]
        #[method_id(@__retain_semantics Other representationOfImageRepsInArray:usingType:properties:)]
        pub unsafe fn representationOfImageRepsInArray_usingType_properties(
            image_reps: &NSArray<NSImageRep>,
            storage_type: NSBitmapImageFileType,
            properties: &NSDictionary<NSBitmapImageRepPropertyKey, Object>,
        ) -> Option<Id<NSData>>;

        #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSDictionary"))]
        #[cfg(not(any(target_os = "ios")))]
        #[method_id(@__retain_semantics Other representationUsingType:properties:)]
        pub unsafe fn representationUsingType_properties(
            &self,
            storage_type: NSBitmapImageFileType,
            properties: &NSDictionary<NSBitmapImageRepPropertyKey, Object>,
        ) -> Option<Id<NSData>>;

        #[cfg(not(any(target_os = "ios")))]
        #[method(setProperty:withValue:)]
        pub unsafe fn setProperty_withValue(
            &self,
            property: &NSBitmapImageRepPropertyKey,
            value: Option<&Object>,
        );

        #[cfg(not(any(target_os = "ios")))]
        #[method_id(@__retain_semantics Other valueForProperty:)]
        pub unsafe fn valueForProperty(
            &self,
            property: &NSBitmapImageRepPropertyKey,
        ) -> Option<Id<Object>>;
    }
);

extern_static!(NSTIFFFileType: NSBitmapImageFileType = NSBitmapImageFileTypeTIFF);

extern_static!(NSBMPFileType: NSBitmapImageFileType = NSBitmapImageFileTypeBMP);

extern_static!(NSGIFFileType: NSBitmapImageFileType = NSBitmapImageFileTypeGIF);

extern_static!(NSJPEGFileType: NSBitmapImageFileType = NSBitmapImageFileTypeJPEG);

extern_static!(NSPNGFileType: NSBitmapImageFileType = NSBitmapImageFileTypePNG);

extern_static!(NSJPEG2000FileType: NSBitmapImageFileType = NSBitmapImageFileTypeJPEG2000);

extern_static!(NSAlphaFirstBitmapFormat: NSBitmapFormat = NSBitmapFormatAlphaFirst);

extern_static!(
    NSAlphaNonpremultipliedBitmapFormat: NSBitmapFormat = NSBitmapFormatAlphaNonpremultiplied
);

extern_static!(
    NSFloatingPointSamplesBitmapFormat: NSBitmapFormat = NSBitmapFormatFloatingPointSamples
);

extern_static!(
    NS16BitLittleEndianBitmapFormat: NSBitmapFormat = NSBitmapFormatSixteenBitLittleEndian
);

extern_static!(
    NS32BitLittleEndianBitmapFormat: NSBitmapFormat = NSBitmapFormatThirtyTwoBitLittleEndian
);

extern_static!(NS16BitBigEndianBitmapFormat: NSBitmapFormat = NSBitmapFormatSixteenBitBigEndian);

extern_static!(NS32BitBigEndianBitmapFormat: NSBitmapFormat = NSBitmapFormatThirtyTwoBitBigEndian);
