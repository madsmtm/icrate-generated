//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

extern_protocol!(
    #[cfg(not(any(target_os = "ios")))]
    pub unsafe trait NSTextInputClient {
        #[cfg(not(any(target_os = "ios")))]
        #[method(insertText:replacementRange:)]
        unsafe fn insertText_replacementRange(&self, string: &Object, replacement_range: NSRange);

        #[cfg(not(any(target_os = "ios")))]
        #[method(doCommandBySelector:)]
        unsafe fn doCommandBySelector(&self, selector: Sel);

        #[cfg(not(any(target_os = "ios")))]
        #[method(setMarkedText:selectedRange:replacementRange:)]
        unsafe fn setMarkedText_selectedRange_replacementRange(
            &self,
            string: &Object,
            selected_range: NSRange,
            replacement_range: NSRange,
        );

        #[cfg(not(any(target_os = "ios")))]
        #[method(unmarkText)]
        unsafe fn unmarkText(&self);

        #[cfg(not(any(target_os = "ios")))]
        #[method(selectedRange)]
        unsafe fn selectedRange(&self) -> NSRange;

        #[cfg(not(any(target_os = "ios")))]
        #[method(markedRange)]
        unsafe fn markedRange(&self) -> NSRange;

        #[cfg(not(any(target_os = "ios")))]
        #[method(hasMarkedText)]
        unsafe fn hasMarkedText(&self) -> bool;

        #[cfg(feature = "Foundation_NSAttributedString")]
        #[cfg(not(any(target_os = "ios")))]
        #[method_id(@__retain_semantics Other attributedSubstringForProposedRange:actualRange:)]
        unsafe fn attributedSubstringForProposedRange_actualRange(
            &self,
            range: NSRange,
            actual_range: NSRangePointer,
        ) -> Option<Id<NSAttributedString>>;

        #[cfg(feature = "Foundation_NSArray")]
        #[cfg(not(any(target_os = "ios")))]
        #[method_id(@__retain_semantics Other validAttributesForMarkedText)]
        unsafe fn validAttributesForMarkedText(&self) -> Id<NSArray<NSAttributedStringKey>>;

        #[cfg(not(any(target_os = "ios")))]
        #[method(firstRectForCharacterRange:actualRange:)]
        unsafe fn firstRectForCharacterRange_actualRange(
            &self,
            range: NSRange,
            actual_range: NSRangePointer,
        ) -> NSRect;

        #[cfg(not(any(target_os = "ios")))]
        #[method(characterIndexForPoint:)]
        unsafe fn characterIndexForPoint(&self, point: NSPoint) -> NSUInteger;

        #[cfg(feature = "Foundation_NSAttributedString")]
        #[cfg(not(any(target_os = "ios")))]
        #[optional]
        #[method_id(@__retain_semantics Other attributedString)]
        unsafe fn attributedString(&self) -> Id<NSAttributedString>;

        #[cfg(not(any(target_os = "ios")))]
        #[optional]
        #[method(fractionOfDistanceThroughGlyphForPoint:)]
        unsafe fn fractionOfDistanceThroughGlyphForPoint(&self, point: NSPoint) -> CGFloat;

        #[cfg(not(any(target_os = "ios")))]
        #[optional]
        #[method(baselineDeltaForCharacterAtIndex:)]
        unsafe fn baselineDeltaForCharacterAtIndex(&self, an_index: NSUInteger) -> CGFloat;

        #[cfg(not(any(target_os = "ios")))]
        #[optional]
        #[method(windowLevel)]
        unsafe fn windowLevel(&self) -> NSInteger;

        #[cfg(not(any(target_os = "ios")))]
        #[optional]
        #[method(drawsVerticallyForCharacterAtIndex:)]
        unsafe fn drawsVerticallyForCharacterAtIndex(&self, char_index: NSUInteger) -> bool;
    }

    unsafe impl ProtocolType for dyn NSTextInputClient {}
);
