//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::CoreData::*;
use crate::Foundation::*;

extern_protocol!(
    #[cfg(not(any(target_os = "ios")))]
    pub unsafe trait NSColorPickingDefault {
        #[cfg(feature = "AppKit_NSColorPanel")]
        #[cfg(not(any(target_os = "ios")))]
        #[method_id(@__retain_semantics Init initWithPickerMask:colorPanel:)]
        unsafe fn initWithPickerMask_colorPanel(
            this: Option<Allocated<Self>>,
            mask: NSUInteger,
            owning_color_panel: &NSColorPanel,
        ) -> Option<Id<Self>>;

        #[cfg(feature = "AppKit_NSImage")]
        #[cfg(not(any(target_os = "ios")))]
        #[method_id(@__retain_semantics Other provideNewButtonImage)]
        unsafe fn provideNewButtonImage(&self) -> Id<NSImage>;

        #[cfg(all(feature = "AppKit_NSButtonCell", feature = "AppKit_NSImage"))]
        #[cfg(not(any(target_os = "ios")))]
        #[method(insertNewButtonImage:in:)]
        unsafe fn insertNewButtonImage_in(
            &self,
            new_button_image: &NSImage,
            button_cell: &NSButtonCell,
        );

        #[cfg(not(any(target_os = "ios")))]
        #[method(viewSizeChanged:)]
        unsafe fn viewSizeChanged(&self, sender: Option<&Object>);

        #[cfg(not(any(target_os = "ios")))]
        #[method(alphaControlAddedOrRemoved:)]
        unsafe fn alphaControlAddedOrRemoved(&self, sender: Option<&Object>);

        #[cfg(feature = "AppKit_NSColorList")]
        #[cfg(not(any(target_os = "ios")))]
        #[method(attachColorList:)]
        unsafe fn attachColorList(&self, color_list: &NSColorList);

        #[cfg(feature = "AppKit_NSColorList")]
        #[cfg(not(any(target_os = "ios")))]
        #[method(detachColorList:)]
        unsafe fn detachColorList(&self, color_list: &NSColorList);

        #[cfg(not(any(target_os = "ios")))]
        #[method(setMode:)]
        unsafe fn setMode(&self, mode: NSColorPanelMode);

        #[cfg(feature = "Foundation_NSString")]
        #[cfg(not(any(target_os = "ios")))]
        #[method_id(@__retain_semantics Other buttonToolTip)]
        unsafe fn buttonToolTip(&self) -> Id<NSString>;

        #[cfg(not(any(target_os = "ios")))]
        #[method(minContentSize)]
        unsafe fn minContentSize(&self) -> NSSize;
    }

    unsafe impl ProtocolType for dyn NSColorPickingDefault {}
);

extern_protocol!(
    #[cfg(not(any(target_os = "ios")))]
    pub unsafe trait NSColorPickingCustom: NSColorPickingDefault {
        #[cfg(not(any(target_os = "ios")))]
        #[method(supportsMode:)]
        unsafe fn supportsMode(&self, mode: NSColorPanelMode) -> bool;

        #[cfg(not(any(target_os = "ios")))]
        #[method(currentMode)]
        unsafe fn currentMode(&self) -> NSColorPanelMode;

        #[cfg(feature = "AppKit_NSView")]
        #[cfg(not(any(target_os = "ios")))]
        #[method_id(@__retain_semantics Other provideNewView:)]
        unsafe fn provideNewView(&self, initial_request: bool) -> Id<NSView>;

        #[cfg(feature = "AppKit_NSColor")]
        #[cfg(not(any(target_os = "ios")))]
        #[method(setColor:)]
        unsafe fn setColor(&self, new_color: &NSColor);
    }

    unsafe impl ProtocolType for dyn NSColorPickingCustom {}
);
