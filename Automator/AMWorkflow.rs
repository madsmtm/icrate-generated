//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::AppKit::*;
use crate::Automator::*;
use crate::Foundation::*;
use crate::OSAKit::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "Automator_AMWorkflow")]
    #[cfg(not(any(target_os = "ios")))]
    pub struct AMWorkflow;

    #[cfg(feature = "Automator_AMWorkflow")]
    unsafe impl ClassType for AMWorkflow {
        type Super = NSObject;
    }
);

#[cfg(feature = "Automator_AMWorkflow")]
unsafe impl NSObjectProtocol for AMWorkflow {}

extern_methods!(
    #[cfg(feature = "Automator_AMWorkflow")]
    unsafe impl AMWorkflow {
        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
        #[cfg(not(any(target_os = "ios")))]
        #[method_id(@__retain_semantics Other runWorkflowAtURL:withInput:error:_)]
        pub unsafe fn runWorkflowAtURL_withInput_error(
            file_url: &NSURL,
            input: Option<&Object>,
        ) -> Result<Id<Object>, Id<NSError>>;

        #[cfg(not(any(target_os = "ios")))]
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Option<Allocated<Self>>) -> Id<Self>;

        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
        #[cfg(not(any(target_os = "ios")))]
        #[method_id(@__retain_semantics Init initWithContentsOfURL:error:_)]
        pub unsafe fn initWithContentsOfURL_error(
            this: Option<Allocated<Self>>,
            file_url: &NSURL,
        ) -> Result<Id<Self>, Id<NSError>>;

        #[cfg(all(feature = "Foundation_NSError", feature = "Foundation_NSURL"))]
        #[cfg(not(any(target_os = "ios")))]
        #[method(writeToURL:error:_)]
        pub unsafe fn writeToURL_error(&self, file_url: &NSURL) -> Result<(), Id<NSError>>;

        #[cfg(feature = "Foundation_NSString")]
        #[cfg(not(any(target_os = "ios")))]
        #[method(setValue:forVariableWithName:)]
        pub unsafe fn setValue_forVariableWithName(
            &self,
            value: Option<&Object>,
            variable_name: &NSString,
        ) -> bool;

        #[cfg(feature = "Foundation_NSString")]
        #[cfg(not(any(target_os = "ios")))]
        #[method_id(@__retain_semantics Other valueForVariableWithName:)]
        pub unsafe fn valueForVariableWithName(
            &self,
            variable_name: &NSString,
        ) -> Option<Id<Object>>;

        #[cfg(feature = "Automator_AMAction")]
        #[cfg(not(any(target_os = "ios")))]
        #[method(addAction:)]
        pub unsafe fn addAction(&self, action: &AMAction);

        #[cfg(feature = "Automator_AMAction")]
        #[cfg(not(any(target_os = "ios")))]
        #[method(removeAction:)]
        pub unsafe fn removeAction(&self, action: &AMAction);

        #[cfg(feature = "Automator_AMAction")]
        #[cfg(not(any(target_os = "ios")))]
        #[method(insertAction:atIndex:)]
        pub unsafe fn insertAction_atIndex(&self, action: &AMAction, index: NSUInteger);

        #[cfg(not(any(target_os = "ios")))]
        #[method(moveActionAtIndex:toIndex:)]
        pub unsafe fn moveActionAtIndex_toIndex(
            &self,
            start_index: NSUInteger,
            end_index: NSUInteger,
        );

        #[cfg(feature = "Foundation_NSURL")]
        #[cfg(not(any(target_os = "ios")))]
        #[method_id(@__retain_semantics Other fileURL)]
        pub unsafe fn fileURL(&self) -> Option<Id<NSURL>>;

        #[cfg(all(feature = "Automator_AMAction", feature = "Foundation_NSArray"))]
        #[cfg(not(any(target_os = "ios")))]
        #[method_id(@__retain_semantics Other actions)]
        pub unsafe fn actions(&self) -> Id<NSArray<AMAction>>;

        #[cfg(not(any(target_os = "ios")))]
        #[method_id(@__retain_semantics Other input)]
        pub unsafe fn input(&self) -> Option<Id<Object>>;

        #[cfg(not(any(target_os = "ios")))]
        #[method(setInput:)]
        pub unsafe fn setInput(&self, input: Option<&Object>);

        #[cfg(not(any(target_os = "ios")))]
        #[method_id(@__retain_semantics Other output)]
        pub unsafe fn output(&self) -> Option<Id<Object>>;
    }
);
