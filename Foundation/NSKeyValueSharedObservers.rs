//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;

use crate::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSKeyValueSharedObserversSnapshot;

    unsafe impl ClassType for NSKeyValueSharedObserversSnapshot {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSObjectProtocol for NSKeyValueSharedObserversSnapshot {}

extern_methods!(
    unsafe impl NSKeyValueSharedObserversSnapshot {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSKeyValueSharedObservers;

    unsafe impl ClassType for NSKeyValueSharedObservers {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl NSObjectProtocol for NSKeyValueSharedObservers {}

extern_methods!(
    unsafe impl NSKeyValueSharedObservers {
        #[method_id(@__retain_semantics Init initWithObservableClass:)]
        pub unsafe fn initWithObservableClass(
            this: Allocated<Self>,
            observable_class: &AnyClass,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;

        #[cfg(all(feature = "NSKeyValueObserving", feature = "NSString"))]
        #[method(addSharedObserver:forKey:options:context:)]
        pub unsafe fn addSharedObserver_forKey_options_context(
            &self,
            observer: &NSObject,
            key: &NSString,
            options: NSKeyValueObservingOptions,
            context: *mut c_void,
        );

        #[cfg(all(feature = "NSKeyValueObserving", feature = "NSString"))]
        #[method(addObserver:forKeyPath:options:context:)]
        pub unsafe fn addObserver_forKeyPath_options_context(
            &self,
            observer: &NSObject,
            key_path: &NSString,
            options: NSKeyValueObservingOptions,
            context: *mut c_void,
        );

        #[method_id(@__retain_semantics Other snapshot)]
        pub unsafe fn snapshot(&self) -> Retained<NSKeyValueSharedObserversSnapshot>;
    }
);

extern_category!(
    /// Category "NSKeyValueSharedObserverRegistration" on [`NSObject`].
    #[doc(alias = "NSKeyValueSharedObserverRegistration")]
    pub unsafe trait NSObjectNSKeyValueSharedObserverRegistration {
        #[method(setSharedObservers:)]
        unsafe fn setSharedObservers(
            &self,
            shared_observers: Option<&NSKeyValueSharedObserversSnapshot>,
        );
    }

    unsafe impl NSObjectNSKeyValueSharedObserverRegistration for NSObject {}
);
