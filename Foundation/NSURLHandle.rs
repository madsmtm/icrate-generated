//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use crate::common::*;
use crate::Foundation::*;

extern_static!(NSHTTPPropertyStatusCodeKey: Option<&'static NSString>);

extern_static!(NSHTTPPropertyStatusReasonKey: Option<&'static NSString>);

extern_static!(NSHTTPPropertyServerHTTPVersionKey: Option<&'static NSString>);

extern_static!(NSHTTPPropertyRedirectionHeadersKey: Option<&'static NSString>);

extern_static!(NSHTTPPropertyErrorPageDataKey: Option<&'static NSString>);

extern_static!(NSHTTPPropertyHTTPProxy: Option<&'static NSString>);

extern_static!(NSFTPPropertyUserLoginKey: Option<&'static NSString>);

extern_static!(NSFTPPropertyUserPasswordKey: Option<&'static NSString>);

extern_static!(NSFTPPropertyActiveTransferModeKey: Option<&'static NSString>);

extern_static!(NSFTPPropertyFileOffsetKey: Option<&'static NSString>);

extern_static!(NSFTPPropertyFTPProxy: Option<&'static NSString>);

ns_enum!(
    #[underlying(NSUInteger)]
    pub enum NSURLHandleStatus {
        NSURLHandleNotLoaded = 0,
        NSURLHandleLoadSucceeded = 1,
        NSURLHandleLoadInProgress = 2,
        NSURLHandleLoadFailed = 3,
    }
);

extern_protocol!(
    pub struct NSURLHandleClient;

    unsafe impl ProtocolType for NSURLHandleClient {
        #[cfg(all(feature = "Foundation_NSData", feature = "Foundation_NSURLHandle"))]
        #[method(URLHandle:resourceDataDidBecomeAvailable:)]
        pub unsafe fn URLHandle_resourceDataDidBecomeAvailable(
            &self,
            sender: Option<&NSURLHandle>,
            new_bytes: Option<&NSData>,
        );

        #[cfg(feature = "Foundation_NSURLHandle")]
        #[method(URLHandleResourceDidBeginLoading:)]
        pub unsafe fn URLHandleResourceDidBeginLoading(&self, sender: Option<&NSURLHandle>);

        #[cfg(feature = "Foundation_NSURLHandle")]
        #[method(URLHandleResourceDidFinishLoading:)]
        pub unsafe fn URLHandleResourceDidFinishLoading(&self, sender: Option<&NSURLHandle>);

        #[cfg(feature = "Foundation_NSURLHandle")]
        #[method(URLHandleResourceDidCancelLoading:)]
        pub unsafe fn URLHandleResourceDidCancelLoading(&self, sender: Option<&NSURLHandle>);

        #[cfg(all(feature = "Foundation_NSString", feature = "Foundation_NSURLHandle"))]
        #[method(URLHandle:resourceDidFailLoadingWithReason:)]
        pub unsafe fn URLHandle_resourceDidFailLoadingWithReason(
            &self,
            sender: Option<&NSURLHandle>,
            reason: Option<&NSString>,
        );
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "Foundation_NSURLHandle")]
    pub struct NSURLHandle;

    #[cfg(feature = "Foundation_NSURLHandle")]
    unsafe impl ClassType for NSURLHandle {
        type Super = NSObject;
    }
);

extern_methods!(
    #[cfg(feature = "Foundation_NSURLHandle")]
    unsafe impl NSURLHandle {
        #[method(registerURLHandleClass:)]
        pub unsafe fn registerURLHandleClass(an_url_handle_subclass: Option<&Class>);

        #[cfg(feature = "Foundation_NSURL")]
        #[method(URLHandleClassForURL:)]
        pub unsafe fn URLHandleClassForURL(an_url: Option<&NSURL>) -> Option<&'static Class>;

        #[method(status)]
        pub unsafe fn status(&self) -> NSURLHandleStatus;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other failureReason)]
        pub unsafe fn failureReason(&self) -> Option<Id<NSString, Shared>>;

        #[method(addClient:)]
        pub unsafe fn addClient(&self, client: Option<&NSURLHandleClient>);

        #[method(removeClient:)]
        pub unsafe fn removeClient(&self, client: Option<&NSURLHandleClient>);

        #[method(loadInBackground)]
        pub unsafe fn loadInBackground(&self);

        #[method(cancelLoadInBackground)]
        pub unsafe fn cancelLoadInBackground(&self);

        #[cfg(feature = "Foundation_NSData")]
        #[method_id(@__retain_semantics Other resourceData)]
        pub unsafe fn resourceData(&self) -> Option<Id<NSData, Shared>>;

        #[cfg(feature = "Foundation_NSData")]
        #[method_id(@__retain_semantics Other availableResourceData)]
        pub unsafe fn availableResourceData(&self) -> Option<Id<NSData, Shared>>;

        #[method(expectedResourceDataSize)]
        pub unsafe fn expectedResourceDataSize(&self) -> c_longlong;

        #[method(flushCachedData)]
        pub unsafe fn flushCachedData(&self);

        #[cfg(feature = "Foundation_NSString")]
        #[method(backgroundLoadDidFailWithReason:)]
        pub unsafe fn backgroundLoadDidFailWithReason(&self, reason: Option<&NSString>);

        #[cfg(feature = "Foundation_NSData")]
        #[method(didLoadBytes:loadComplete:)]
        pub unsafe fn didLoadBytes_loadComplete(&self, new_bytes: Option<&NSData>, yorn: bool);

        #[cfg(feature = "Foundation_NSURL")]
        #[method(canInitWithURL:)]
        pub unsafe fn canInitWithURL(an_url: Option<&NSURL>) -> bool;

        #[cfg(feature = "Foundation_NSURL")]
        #[method_id(@__retain_semantics Other cachedHandleForURL:)]
        pub unsafe fn cachedHandleForURL(an_url: Option<&NSURL>)
            -> Option<Id<NSURLHandle, Shared>>;

        #[cfg(feature = "Foundation_NSURL")]
        #[method_id(@__retain_semantics Init initWithURL:cached:)]
        pub unsafe fn initWithURL_cached(
            this: Option<Allocated<Self>>,
            an_url: Option<&NSURL>,
            will_cache: bool,
        ) -> Option<Id<Self, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other propertyForKey:)]
        pub unsafe fn propertyForKey(
            &self,
            property_key: Option<&NSString>,
        ) -> Option<Id<Object, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method_id(@__retain_semantics Other propertyForKeyIfAvailable:)]
        pub unsafe fn propertyForKeyIfAvailable(
            &self,
            property_key: Option<&NSString>,
        ) -> Option<Id<Object, Shared>>;

        #[cfg(feature = "Foundation_NSString")]
        #[method(writeProperty:forKey:)]
        pub unsafe fn writeProperty_forKey(
            &self,
            property_value: Option<&Object>,
            property_key: Option<&NSString>,
        ) -> bool;

        #[cfg(feature = "Foundation_NSData")]
        #[method(writeData:)]
        pub unsafe fn writeData(&self, data: Option<&NSData>) -> bool;

        #[cfg(feature = "Foundation_NSData")]
        #[method_id(@__retain_semantics Other loadInForeground)]
        pub unsafe fn loadInForeground(&self) -> Option<Id<NSData, Shared>>;

        #[method(beginLoadInBackground)]
        pub unsafe fn beginLoadInBackground(&self);

        #[method(endLoadInBackground)]
        pub unsafe fn endLoadInBackground(&self);
    }
);
